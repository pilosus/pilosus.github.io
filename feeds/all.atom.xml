<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Vitaly's Technical Blog</title><link href="https://blog.pilosus.org/" rel="alternate"></link><link href="https://blog.pilosus.org/feeds/all.atom.xml" rel="self"></link><id>https://blog.pilosus.org/</id><updated>2019-09-28T14:12:00+03:00</updated><entry><title>Switching between Kubernetes clusters and namespaces: kubectx andÂ kubens</title><link href="https://blog.pilosus.org/posts/2019/09/28/kubernetes-context-switch/" rel="alternate"></link><published>2019-09-28T14:12:00+03:00</published><updated>2019-09-28T14:12:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-09-28:/posts/2019/09/28/kubernetes-context-switch/</id><summary type="html">&lt;p class="first last"&gt;Save your time by using command line tools kubectx and
kubens in multi-cluster environment with more than one
default namespace&amp;nbsp;each.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Having more than one Kubernetes cluster is a common pattern. You may
have one cluster dedicated to production environment, another one for
staging and the third one for testing&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The same thing with Kubernetes namespaces: it&amp;#8217;s great abstraction
allowing you to separate workloads by their purpose. You may have
multiple namespaces for different test environments or a dedicated
namespace for app-related pods and another namespace for logging and
monitoring&amp;nbsp;services.&lt;/p&gt;
&lt;p&gt;Configuring access to multiple Kubernetes clusters is well documented
in official &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/"&gt;k8s documentation&lt;/a&gt;. Still switching context and
specifying namespace for each &lt;tt class="docutils literal"&gt;kubectl&lt;/tt&gt; invocation is tedious. This
is where &lt;a class="reference external" href="https://github.com/ahmetb/kubectx/"&gt;kubectx and kubens&lt;/a&gt; come into play. But let&amp;#8217;s configure
multiple clusters&amp;nbsp;first.&lt;/p&gt;
&lt;div class="section" id="kubernetes-configuration-file-multiple-clusters"&gt;
&lt;h2&gt;Kubernetes configuration file: multiple&amp;nbsp;clusters&lt;/h2&gt;
&lt;p&gt;You find an extensive guide in the &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/"&gt;k8s documentation&lt;/a&gt;. All in all,
your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.kube/config&lt;/span&gt;&lt;/tt&gt; should include three&amp;nbsp;lists:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clusters&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Contexts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Context defines a cluster, it&amp;#8217;s namespace and a user. When the user
switches to the context, he or she is working with the cluster and the
namespaces of the&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;Each cluster may define master node&amp;#8217;s server hostname and optionaly
other entities like base64-encoded&amp;nbsp;certificates.&lt;/p&gt;
&lt;p&gt;Users may also be defined by autherntication options that covered in
&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/"&gt;Kubernetes authentication guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example configuration file for two Kubernetes clusters and two
users with different authentication types may look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;clusters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;certificate-authority-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;YOUR-CERT-AUTHORITY-DATA-CLUSTER-1&lt;/span&gt;
    &lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://YOUR-SERVER-ADDRESS-1&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster1&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;certificate-authority-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;YOUR-CERT-AUTHORITY-DATA-CLUSTER-2&lt;/span&gt;
    &lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://YOUR-SERVER-ADDRESS-2&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster2&lt;/span&gt;
&lt;span class="nt"&gt;contexts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster1&lt;/span&gt;
    &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;production&lt;/span&gt;
    &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user1&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;context1&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cluster2&lt;/span&gt;
    &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
    &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user2&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;context2&lt;/span&gt;
&lt;span class="nt"&gt;current-context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;context1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Config&lt;/span&gt;
&lt;span class="nt"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{}&lt;/span&gt;
&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user1&lt;/span&gt;
  &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;client-certificate-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;YOUR-CLIENT-CERT-DATA-1&lt;/span&gt;
    &lt;span class="nt"&gt;client-key-data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;YOUR-CLIENT-KEY-DATA-1&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user2&lt;/span&gt;
  &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;auth-provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;access-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;YOUR-ACCESS-TOKEN&lt;/span&gt;
        &lt;span class="nt"&gt;cmd-args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;config config-helper --format=json&lt;/span&gt;
        &lt;span class="nt"&gt;cmd-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/PATH/TO/google-cloud-sdk/bin/gcloud&lt;/span&gt;
        &lt;span class="nt"&gt;expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2019-09-28T00:00:00Z&amp;quot;&lt;/span&gt;
        &lt;span class="nt"&gt;expiry-key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{.credential.token_expiry}&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;token-key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{.credential.access_token}&amp;#39;&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gcp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kubectx-and-kubens"&gt;
&lt;h2&gt;kubectx and&amp;nbsp;kubens&lt;/h2&gt;
&lt;p&gt;Although switching context is easy with &lt;tt class="docutils literal"&gt;kubectl config &lt;span class="pre"&gt;use-context&lt;/span&gt;&lt;/tt&gt;,
working with both contexts and namespaces require way too many key strokes!
&lt;a class="reference external" href="https://github.com/ahmetb/kubectx/"&gt;kubectx and kubens&lt;/a&gt; command line tools allow you to switch context this&amp;nbsp;easy:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectx context2  # the same as kubectl config use-context context2
&lt;/pre&gt;
&lt;p&gt;Chaning context with &lt;tt class="docutils literal"&gt;kubectx&lt;/tt&gt; changes your config file&amp;#8217;s
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;current-context&lt;/span&gt;&lt;/tt&gt; field the same way the &lt;tt class="docutils literal"&gt;kubectl config
&lt;span class="pre"&gt;use-context&lt;/span&gt;&lt;/tt&gt; does.&lt;/p&gt;
&lt;p&gt;Now, instead of typing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--namespace&lt;/span&gt; &lt;span class="pre"&gt;your-namespace&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;
&lt;span class="pre"&gt;your-namespace&lt;/span&gt;&lt;/tt&gt; in every &lt;tt class="docutils literal"&gt;kubectl&lt;/tt&gt; invokation, change namespace
once with &lt;tt class="docutils literal"&gt;kubens&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubens test2     # your current k8s namespace is test2 now
$ kubectl get po   # the same as invoking with --namespace test2
# kubens test1     # your current k8s namespace is test1 now
&lt;/pre&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;kubectx&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;kubens&lt;/tt&gt; allow you to save some key strokes
and really come in handy when you switch over multiple Kubernetes
clusters with more than one default&amp;nbsp;namespace.&lt;/p&gt;
&lt;/div&gt;
</content><category term="k8s"></category><category term="kubectx"></category><category term="kubens"></category></entry><entry><title>Application configs: files or environment variables? ActuallyÂ both!</title><link href="https://blog.pilosus.org/posts/2019/06/07/application-configs-files-or-environment-variables-actually-both/" rel="alternate"></link><published>2019-06-07T20:30:00+03:00</published><updated>2019-06-07T20:30:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-06-07:/posts/2019/06/07/application-configs-files-or-environment-variables-actually-both/</id><summary type="html">&lt;p&gt;App configuration is highly opinionated topic. It&amp;#8217;s technology stack-
and infrastructure-dependent. When it comes to configs there are a few
parties with a possible conflict of interests. Software developers
want an easy access to app&amp;#8217;s configuration, versioning, readability,
language support for the config format. Security guys want security â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;App configuration is highly opinionated topic. It&amp;#8217;s technology stack-
and infrastructure-dependent. When it comes to configs there are a few
parties with a possible conflict of interests. Software developers
want an easy access to app&amp;#8217;s configuration, versioning, readability,
language support for the config format. Security guys want security!
&lt;span class="caps"&gt;SRE&lt;/span&gt;/Administrators want an easy deployment and scaling as well as
infrastructure native support for configuration format of
choice. Managers, well, they probably want to smile at conferences and
don&amp;#8217;t want you all to spend too much time on such a miserable question
like configuration&amp;nbsp;architecture!&lt;/p&gt;
&lt;p&gt;In software development some things change rapidly. Ideas, manifests
and frameworks rise and fall. So lets review what&amp;#8217;s application
configuration today and what it could&amp;nbsp;be.&lt;/p&gt;
&lt;div class="section" id="environment-variables-good-and-bad-parts"&gt;
&lt;h2&gt;Environment variables: good and bad&amp;nbsp;parts&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Environment_variable"&gt;Environment variables&lt;/a&gt; (&lt;em&gt;env vars&lt;/em&gt; or &lt;em&gt;env&lt;/em&gt;) are often recommended
as the only way to store application configs (see &lt;a class="reference external" href="https://12factor.net/config"&gt;The Twelve-Factor
App&lt;/a&gt; rule &lt;span class="caps"&gt;III&lt;/span&gt;). Envs are &lt;strong&gt;good&lt;/strong&gt; bacause they&amp;nbsp;are:&lt;/p&gt;
&lt;div class="section" id="secure"&gt;
&lt;h3&gt;Secure&lt;/h3&gt;
&lt;p&gt;Environment variables are set by who&amp;#8217;s responsible for the deployment
environment: by developer on local machines, by
&lt;span class="caps"&gt;SRE&lt;/span&gt;/Administrator/DevOps in production. With env you won&amp;#8217;t compromise
your production credentials even if your code&amp;#8217;s leaked to the
public. It&amp;#8217;s also harder for developers to break something in
production, because they simply don&amp;#8217;t have access to production&amp;nbsp;credentials.&lt;/p&gt;
&lt;p&gt;Messing up with envs in the runtime may also be tricky, as you cannot
change environment variables for the parent process in *nix&amp;nbsp;systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="universal"&gt;
&lt;h3&gt;Universal&lt;/h3&gt;
&lt;p&gt;Environment variables are everywhere! On &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux, MacOS,
Windows. Every production-ready programming language supports envs out
of&amp;nbsp;box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-to-use"&gt;
&lt;h3&gt;Easy to&amp;nbsp;use&lt;/h3&gt;
&lt;p&gt;Env is flat. Basically it&amp;#8217;s a key-value pair with string value. So
loading envs is&amp;nbsp;easy.&lt;/p&gt;
&lt;p&gt;There are some &lt;strong&gt;bad&lt;/strong&gt; things about envs too. Envs&amp;nbsp;are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unexpressive"&gt;
&lt;h3&gt;Unexpressive&lt;/h3&gt;
&lt;p&gt;The flip side of the &amp;#8220;easy&amp;#8221; coin is unexpressiveness. Envs are flat
key-value strings. You cannot store the whole config as en env. So you
need to read envs in your code and then construct some sort of the
final configuration, possible overly&amp;nbsp;complex.&lt;/p&gt;
&lt;p&gt;Flat env structure also get you into a grey area of bad variable
names. Consider the following &lt;span class="caps"&gt;YAML&lt;/span&gt;&amp;nbsp;config:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cluster:
  host_weight:
    node00.example.com: 0.8
    node01.example.com: 0.8
    node02.example.com: 1.0
    node03.example.com: 0.5
db: 1
user: app
password: my_password
&lt;/pre&gt;
&lt;p&gt;It may translate to the following envs to substitute values in the
config&amp;nbsp;above:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CLUSTER_HOST_NODE_00=0.8
CLUSTER_HOST_NODE_01=0.8
CLUSTER_HOST_NODE_02=1.0
CLUSTER_HOST_NODE_03=0.5
CLUSTER_DB=1
CLUSTER_USER=app
CLUSTER_PASSWORD=my_password
&lt;/pre&gt;
&lt;p&gt;So, you still store some kind of configuration file in your app&amp;#8217;s
version control system (&lt;span class="caps"&gt;VCS&lt;/span&gt;). Usually it&amp;#8217;s a module in you programming
language (e.g. &lt;tt class="docutils literal"&gt;config.py&lt;/tt&gt; in Python) with some language-specific
data structures and even some logic. Values (at least some of them)
are stored as envs with quite awkward names. These configs are much
less readable as the &lt;span class="caps"&gt;YAML&lt;/span&gt;&amp;nbsp;above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="need-to-be-stored-somewhere-eventually"&gt;
&lt;h3&gt;Need to be stored somewhere&amp;nbsp;eventually&lt;/h3&gt;
&lt;p&gt;Envrironment variables are stored somewhere eventually: in your admins
repository, orchestration system&amp;#8217;s manifest files that also checked in
the &lt;span class="caps"&gt;VCS&lt;/span&gt;. So even separated from the app&amp;#8217;s code repo, envs are still
stored in files that potentially could be accessed by more people than
they&amp;nbsp;should.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="may-break-release-determinism"&gt;
&lt;h3&gt;May break release&amp;nbsp;determinism&lt;/h3&gt;
&lt;p&gt;If you use config files checked into your app&amp;#8217;s repository, your
config is also a part of the app&amp;#8217;s releases. You can effectively
rollback to a stable release whenever&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;In the case of envs your app&amp;#8217;s releases are separated from the
configs. Ideally environment variables should be versioned too. Both
app&amp;#8217;s and config&amp;#8217;s releases should be synchornized somehow. Otherwise
your release determinism may break, rollback to previous versions with
zero downtime may become&amp;nbsp;difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-files-good-and-bad-parts"&gt;
&lt;h2&gt;Configuration files: good and bad&amp;nbsp;parts&lt;/h2&gt;
&lt;p&gt;Configuration files have their strengths and weakness too. First, the
&lt;strong&gt;good&lt;/strong&gt; things. Files&amp;nbsp;are:&lt;/p&gt;
&lt;div class="section" id="readable"&gt;
&lt;h3&gt;Readable&lt;/h3&gt;
&lt;p&gt;You don&amp;#8217;t write config files as program&amp;#8217;s module (e.g. &lt;tt class="docutils literal"&gt;config.py&lt;/tt&gt;
in Python). Instead you use some language-agnostic format for humans
like &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/tt&gt;. Then you have both readability and (to some extent)
separation code and&amp;nbsp;configs.&lt;/p&gt;
&lt;p&gt;You write clean, self-sufficient configs. No more ugly things&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
HOSTNAME = os.environ.get('DB_HOSTNAME', 'db.example.com')
&lt;/pre&gt;
&lt;p&gt;Developers often group config files by deployment enviroment:
&lt;tt class="docutils literal"&gt;testing.yaml&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;development.yaml&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;production.yaml&lt;/tt&gt;. Sometimes
you cannot reach 100% &lt;a class="reference external" href="https://12factor.net/dev-prod-parity"&gt;deploy environments parity&lt;/a&gt;. So having all
configs at hand may help when fixing a&amp;nbsp;bug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="part-of-release"&gt;
&lt;h3&gt;Part of&amp;nbsp;release&lt;/h3&gt;
&lt;p&gt;As I said earlier, if a config is checked into app&amp;#8217;s repository it a
part of app release history. It makes your app releases more
deterministic allowing to rollback to earlier releases if necessary
with no extra&amp;nbsp;efforts.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;bad&lt;/strong&gt; things about files&amp;nbsp;too:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="formats-hell"&gt;
&lt;h3&gt;Formats&amp;nbsp;hell&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ini&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;TOML&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/tt&gt;, you name it! Probably
you don&amp;#8217;t have a luxuary of having the only one way to do it in your
language. Even in &lt;tt class="docutils literal"&gt;JavaScript&lt;/tt&gt; &lt;span class="caps"&gt;JSON&lt;/span&gt; is not the only configuration
format in use. But in popular general-purpose languages like
&lt;tt class="docutils literal"&gt;Python&lt;/tt&gt; it&amp;#8217;s even&amp;nbsp;worse.&lt;/p&gt;
&lt;p&gt;In a complex project with legacy components you may find all sorts of
configuration file formats. It&amp;#8217;s&amp;nbsp;annoying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="insecure"&gt;
&lt;h3&gt;Insecure&lt;/h3&gt;
&lt;p&gt;Junior developers, people on probation period, QAs, admins, maybe even
developers from other teams and departments may have access to your
app&amp;#8217;s secrets when they are in the config files checked into a
&lt;span class="caps"&gt;VCS&lt;/span&gt;. That&amp;#8217;s a huge security problem, even if your network operation
center engineers, admins and devops do a great job isolating
production services and&amp;nbsp;networks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="taking-good-parts-from-both-envs-and-files"&gt;
&lt;h2&gt;Taking good parts from both envs and&amp;nbsp;files&lt;/h2&gt;
&lt;p&gt;But what if we take the good parts from both enrionment variables and
config files, combine them and throw away the bad parts? Sounds great,
doesn&amp;#8217;t&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;First, we need to take a closer look at what&amp;#8217;s really important when
it comes to &lt;em&gt;security&lt;/em&gt;. Actually, it&amp;#8217;s credentials (login/password,
private &lt;span class="caps"&gt;API&lt;/span&gt; keys, cryptographic certificates, etc.) that if kept in
secret solve most of the problems that your config files stored in the
&lt;span class="caps"&gt;VCS&lt;/span&gt; have. If your production database hostname leaks but username and
password are kept in secret you are probably okay. Brutforce attacks,
unpatched software vulnerabilities are still real. But your customer
database isn&amp;#8217;t leaked immediately even if bad guys know your database
&lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Second, we really want to have nice language-agnostic non-flat file
format for our configs. It&amp;#8217;s opinionated, but I personally think that
&lt;a class="reference external" href="https://yaml.org/"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt; is superior to all other formats. It&amp;#8217;s&amp;nbsp;beautiful!&lt;/p&gt;
&lt;p&gt;So what if we use a &lt;span class="caps"&gt;YAML&lt;/span&gt; file and substitute our secrets with
environment variables&amp;nbsp;tokens?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;
  &lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${DB_PASSWORD}&lt;/span&gt;
&lt;span class="nt"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;
  &lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${MAIL_PASSWORD:-my_default_password}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then our app loads the &lt;span class="caps"&gt;YAML&lt;/span&gt; and &lt;strong&gt;interpolates environment variables&lt;/strong&gt;
in&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_db_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;mail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_default_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above snippet a database password has been loaded from the
&lt;tt class="docutils literal"&gt;$DB_PASSWORD&lt;/tt&gt; environment variable. Email password had to be loaded
from &lt;tt class="docutils literal"&gt;$MAIL_PASSWORD&lt;/tt&gt;. It&amp;#8217;s defined as Bash-style env with default
value. It seems that at the time of config loading the
&lt;tt class="docutils literal"&gt;$MAIL_PASSWORD&lt;/tt&gt; wasn&amp;#8217;t set so a default value
&lt;tt class="docutils literal"&gt;'my_default_password'&lt;/tt&gt; is&amp;nbsp;used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proof-of-concept"&gt;
&lt;h2&gt;Proof of&amp;nbsp;concept&lt;/h2&gt;
&lt;p&gt;As a proof of concept I&amp;#8217;ve just released a Python library called
&lt;a class="reference external" href="https://github.com/pilosus/piny"&gt;Piny&lt;/a&gt;. It does exactly&amp;nbsp;this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reads your &lt;span class="caps"&gt;YAML&lt;/span&gt;-config file marked up with environments&amp;nbsp;variables&lt;/li&gt;
&lt;li&gt;Interpolates environment variables with their&amp;nbsp;values&lt;/li&gt;
&lt;li&gt;Creates a Python object with configuration ready for use in your&amp;nbsp;app&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When using &lt;a class="reference external" href="https://github.com/pilosus/piny"&gt;Piny&lt;/a&gt; consider best practices for your configuration&amp;nbsp;files:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Maintain healthy security/convenience balance for your&amp;nbsp;config&lt;/li&gt;
&lt;li&gt;Mark up entity as an environment variable in your &lt;span class="caps"&gt;YAML&lt;/span&gt; if and only
if it really is a &lt;em&gt;secret&lt;/em&gt; (login/passwords, private &lt;span class="caps"&gt;API&lt;/span&gt; keys,
crypto keys, certificates, or maybe &lt;span class="caps"&gt;DB&lt;/span&gt; hostname too? You&amp;nbsp;decide)&lt;/li&gt;
&lt;li&gt;Once config loaded by Piny, validate it using your favourite
validation tool (some integrations are coming in the future&amp;nbsp;releases)&lt;/li&gt;
&lt;li&gt;Store your config files in the version control systems along with
you app&amp;#8217;s&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;Environment variables are set by whomever is responsible for the
deployment. Modern orchestration systems like &lt;a class="reference external" href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; make
it easy to keep envs secure (see &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/configuration/secret/"&gt;Secrets&lt;/a&gt; and &lt;a class="reference external" href="https://www.vaultproject.io/"&gt;Vault&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Piny stands for &lt;em&gt;Piny is not &lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/em&gt;. It&amp;#8217;s not only a library name, but
also a name for &lt;span class="caps"&gt;YAML&lt;/span&gt; marked up with environment&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;You can download Piny at &lt;a class="reference external" href="https://pypi.org/project/piny/"&gt;PyPi&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="architecture"></category><category term="config"></category><category term="k8s"></category></entry><entry><title>ÐÐ¾Ð±Ð¾ÑÐ½ÑÐµ ÑÑÑÐµÐºÑÑ Ð¼Ð°ÑÑ-Ð¼ÐµÐ´Ð¸Ð°: ÐºÑÐ»ÑÑ Ð±ÑÑÑÑÐ¾Ð³Ð¾Â ÑÑÐ¿ÐµÑÐ°</title><link href="https://blog.pilosus.org/posts/2019/06/02/mass-media-fast-track-success-ru/" rel="alternate"></link><published>2019-06-02T12:30:00+03:00</published><updated>2019-06-02T12:30:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-06-02:/posts/2019/06/02/mass-media-fast-track-success-ru/</id><summary type="html">&lt;p&gt;ÐÐ°ÑÑÐ¾Ð²ÑÐµ Ð¼ÐµÐ´Ð¸Ð° Ð¸Ð¼ÐµÑÑ Ð¼Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð±Ð¾ÑÐ½ÑÑ ÑÑÑÐµÐºÑÐ¾Ð². ÐÐ´Ð¸Ð½ Ð¸Ð· Ð½Ð¸Ñ &amp;#8212;
ÑÐ°ÑÐºÑÑÑÐ¸Ð²Ð°Ð½Ð¸Ðµ &amp;#8220;Ð¸ÑÑÐ¾ÑÐ¸Ð¹ ÑÑÐ¿ÐµÑÐ°&amp;#8221; ÐºÐ°Ðº Ð½Ð¾ÑÐ¼Ñ Ð´Ð»Ñ Ð²ÑÐµÑ. ÐÑÐµÐ½Ñ ÑÐ°ÑÑÐ¾ ÑÑÐ¾Ñ
Ð¿Ð¾Ð±Ð¾ÑÐ½ÑÐ¹ ÑÑÑÐµÐºÑ Ð½Ð°ÐºÐ»Ð°Ð´ÑÐ²Ð°ÐµÑÑÑ Ð½Ð° ÐºÑÐ»ÑÑÑÑÐ½ÑÐµ ÑÑÐµÐ½Ð´Ñ Ð²ÑÐ¾Ð´Ðµ Ð¾Ð´ÐµÑÐ¶Ð¸Ð¼Ð¾ÑÑÐ¸
Ð¼Ð¾Ð»Ð¾Ð´Ð¾ÑÑÑÑ Ð¸ Ð¿Ð¾Ð´ÑÐ¾ÑÑÐºÐ¾Ð²Ð¾ÑÑÑÑ, ÐºÐ¾Ð³Ð´Ð° Ð´ÑÐ´Ñ Ñ Ð¿ÑÐ¾ÑÐµÐ´ÑÑ Ð² ÑÐ¾ÑÐ¾ÑÐ¾ ÑÐ¸Ð´ÑÑÐµÐ¼
ÐºÐ¾ÑÑÑÐ¼Ðµ Ð²Ð»ÐµÐ·Ð°ÐµÑ Ð² Ð¿Ð¾Ð´ÑÐ¾ÑÑÐºÐ¾Ð²ÑÐµ ÑÐ·ÐºÐ¸Ðµ Ð´Ð¶Ð¸Ð½ÑÑ Ð¸ ÑÐ½Ð¸ÐºÐµÑÑÑ, ÑÑÐ¾Ð±Ñ
ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²Ð¾Ð²Ð°ÑÑ Zeitgeist. Ð ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐµ â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;ÐÐ°ÑÑÐ¾Ð²ÑÐµ Ð¼ÐµÐ´Ð¸Ð° Ð¸Ð¼ÐµÑÑ Ð¼Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð±Ð¾ÑÐ½ÑÑ ÑÑÑÐµÐºÑÐ¾Ð². ÐÐ´Ð¸Ð½ Ð¸Ð· Ð½Ð¸Ñ &amp;#8212;
ÑÐ°ÑÐºÑÑÑÐ¸Ð²Ð°Ð½Ð¸Ðµ &amp;#8220;Ð¸ÑÑÐ¾ÑÐ¸Ð¹ ÑÑÐ¿ÐµÑÐ°&amp;#8221; ÐºÐ°Ðº Ð½Ð¾ÑÐ¼Ñ Ð´Ð»Ñ Ð²ÑÐµÑ. ÐÑÐµÐ½Ñ ÑÐ°ÑÑÐ¾ ÑÑÐ¾Ñ
Ð¿Ð¾Ð±Ð¾ÑÐ½ÑÐ¹ ÑÑÑÐµÐºÑ Ð½Ð°ÐºÐ»Ð°Ð´ÑÐ²Ð°ÐµÑÑÑ Ð½Ð° ÐºÑÐ»ÑÑÑÑÐ½ÑÐµ ÑÑÐµÐ½Ð´Ñ Ð²ÑÐ¾Ð´Ðµ Ð¾Ð´ÐµÑÐ¶Ð¸Ð¼Ð¾ÑÑÐ¸
Ð¼Ð¾Ð»Ð¾Ð´Ð¾ÑÑÑÑ Ð¸ Ð¿Ð¾Ð´ÑÐ¾ÑÑÐºÐ¾Ð²Ð¾ÑÑÑÑ, ÐºÐ¾Ð³Ð´Ð° Ð´ÑÐ´Ñ Ñ Ð¿ÑÐ¾ÑÐµÐ´ÑÑ Ð² ÑÐ¾ÑÐ¾ÑÐ¾ ÑÐ¸Ð´ÑÑÐµÐ¼
ÐºÐ¾ÑÑÑÐ¼Ðµ Ð²Ð»ÐµÐ·Ð°ÐµÑ Ð² Ð¿Ð¾Ð´ÑÐ¾ÑÑÐºÐ¾Ð²ÑÐµ ÑÐ·ÐºÐ¸Ðµ Ð´Ð¶Ð¸Ð½ÑÑ Ð¸ ÑÐ½Ð¸ÐºÐµÑÑÑ, ÑÑÐ¾Ð±Ñ
ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²Ð¾Ð²Ð°ÑÑ Zeitgeist. Ð ÑÐµÐ·ÑÐ»ÑÑÐ°ÑÐµ ÑÐ¾Ð¶Ð´Ð°ÑÑÑÑ Ð´Ð¾Ð²Ð¾Ð»ÑÐ½Ð¾ Ð²ÑÐµÐ´Ð½ÑÐµ
Ð¼ÐµÐ¼Ñ Ð¿ÑÐ¾ Ð±ÑÑÑÑÑÐµ Ð´ÐµÐ½ÑÐ³Ð¸, Ð±ÑÑÑÑÑÑ ÐºÐ°ÑÑÐµÑÑ, Ð²Ð¾Ð¾Ð±ÑÐµ Ð±ÑÑÑÑÑÐ¹ ÑÑÐ¿ÐµÑ. ÐÑÐ»Ð¸
ÑÑ Ð½Ðµ Ð±ÑÐ» ÑÑÐºÐ¾Ð²Ð¾Ð´Ð¸ÑÐµÐ»ÐµÐ¼ Ð´Ð¾ÑÐºÐ¸ Ð Ð¾ÑÐ½ÐµÑÑÐ¸ Ð² 35, ÑÐ¾ game over, Ð¶Ð¸Ð·Ð½Ñ
ÑÐ»ÐµÐ½. Ð¢Ð°ÐºÐ¾Ð¹ Ð²Ð¾Ñ ÑÑÑÐµÐºÑ ÐÐ¾Ð»ÑÑÐºÐ¸, Ð¼Ð³Ð½Ð¾Ð²ÐµÐ½Ð½Ð¾Ðµ Ð¿ÐµÑÐµÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ðµ Ð½Ð°ÑÑÐ°ÑÑÐ½Ð¾Ð¹
Ð¿Ð°Ð´ÑÐµÑÐ¸ÑÑ Ñ Ð±ÐµÑÐºÐ¾Ð½ÐµÑÐ½ÑÐ¼ &lt;span class="caps"&gt;TODO&lt;/span&gt;-Ð»Ð¸ÑÑÐ¾Ð¼ Ð¸ Ð³Ð¾ÑÑÑÐ¸Ð¼Ð¸ Ð´ÑÐ´Ð»Ð°Ð¹Ð½Ð°Ð¼Ð¸ Ð² ÐºÐ¾ÑÐ¾Ð»ÐµÐ²Ñ
Ð±Ð°Ð»Ð° Ñ Ð¼Ð¾Ð´Ð½Ð¾Ð¹ ÐºÐ°ÑÐµÑÐ¾Ð¹, ÑÑÑÑÑÐ°Ð»ÑÐ½ÑÐ¼Ð¸ ÑÑÑÐµÐ»ÑÐºÐ°Ð¼Ð¸ Ð¸ Ð¶ÐµÐ»Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð»ÐµÑ
Ð² 18. Ð­ÑÐ¾Ñ ÑÑÑÐµÐºÑ Ð¿ÑÐµÐ¿Ð¾Ð´Ð½Ð¾ÑÐ¸ÑÑÑ ÐºÐ°Ðº Ð½Ð¾ÑÐ¼Ð°. ÐÐ°Ð»ÑÑÐµ Ð½Ð¾ÑÐ¼Ð° Ð¿Ð¾Ð´ÑÐ²Ð°ÑÑÐ²Ð°ÐµÑÑÑ
Ð¸ ÑÑÐ¸Ð»Ð¸Ð²Ð°ÐµÑÑÑ ÑÐ¾ÑÑÐµÑÑÐ¼Ð¸ &amp;#8212; ÐºÐ¾Ð½ÑÐµÐ½ÑÑÐ°ÑÐ¾Ð¼ &amp;#8220;ÑÑÐ¿ÐµÑÐ°&amp;#8221;, ÑÐ±Ð¾ÑÐ½Ð¸ÐºÐ°Ð¼Ð¸ Ð¶Ð¸Ð·Ð½ÐµÐ½Ð½ÑÑ
ÑÐ°Ð¹Ð»Ð°Ð¹ÑÐ¾Ð², Ð³Ð´Ðµ Ð½ÐµÑ Ð¼ÐµÑÑÐ° Ð¾Ð±ÑÐ´ÐµÐ½Ð½Ð¾ÑÑÐ¸, Ð½ÐµÑÑÐ¿ÐµÑÑ Ð¸&amp;nbsp;Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ð°Ð¼.&lt;/p&gt;
&lt;p&gt;ÐÐ¾Ð³Ð´Ð° Ð²ÑÐµ ÑÑÐ¾ Ð¿ÑÐ¾Ð½Ð¸ÐºÐ°ÐµÑ Ð² ÑÐ°Ð·Ð¾Ð³ÑÐµÑÑÐµ ÑÑÐµÑÑ, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, Ð² ÑÐ¾ÑÑÐ²ÐµÑÐ½ÑÑ
ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÑ &amp;#8212; Ð¼Ð¾Ð»Ð¾Ð´ÑÑ, Ð±ÑÑÑÑÐ¾ÑÐ°ÑÑÑÑÑÑ Ð¾Ð±Ð»Ð°ÑÑÑ, ÐºÐ¾ÑÐ¾ÑÐ°Ñ ÑÐ°Ð·Ð²Ð¸Ð²Ð°ÐµÑÑÑ
Ð¿ÑÐµÐ¸Ð¼ÑÑÐµÑÑÐ²ÐµÐ½Ð½Ð¾ Ð² ÑÑÐ¾Ð»Ð¸ÑÐ°Ñ, Ñ Ð±Ð¾Ð»ÑÑÐ¸Ð¼Ð¸ Ð´ÐµÐ½ÑÐ³Ð°Ð¼Ð¸, Ñ Ð¾Ð³ÑÐ¾Ð¼Ð½Ð¾Ð¹ Ð½ÐµÑÐ²Ð°ÑÐºÐ¾Ð¹
ÐºÐ°Ð´ÑÐ¾Ð² Ð¸ ÑÐ¿ÐµÑÐ¸ÑÐ¸ÑÐµÑÐºÐ¸Ð¼ Ð²Ð¾Ð·ÑÐ°ÑÑÐ½ÑÐ¼ ÑÐ´Ð²Ð¸Ð³Ð¾Ð¼ Ð² ÑÑÐ¾ÑÐ¾Ð½Ñ &amp;#8220;Ð´Ð¾ 30&amp;#8221; &amp;#8212;
Ð¿Ð¾Ð»ÑÑÐ°ÐµÑÑÑ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾ ÑÐ¼ÐµÑÐ½Ð¾, Ð° Ð¼ÐµÑÑÐ°Ð¼Ð¸ ÑÑÑÐ°ÑÐ½Ð¾. ÐÑÐ´Ð¸ Ð² Ð¸Ð½Ð´ÑÑÑÑÐ¸Ð¸ Ð²Ð¸Ð´ÑÑ,
ÑÑÐ¾ Ð² ÑÐ°Ð¼Ð¾Ð¼ Ð´ÐµÐ»Ðµ Ð¼Ð¾Ð³ÑÑ ÑÑÐ°ÑÑ ÐÐ¾Ð»ÑÑÐºÐ¾Ð¹. ÐÐ¾Ð³ÑÑ, Ð½Ð°ÐºÐ¾Ð½ÐµÑ, ÑÐ±ÑÐ¾ÑÐ¸ÑÑ
Ð¿ÑÐ¾Ð²Ð¸Ð½ÑÐ¸Ð°Ð»ÑÐ½ÑÐµ Ð´ÐµÑÐµÐ²ÑÐ½Ð½ÑÐµ Ð±Ð°ÑÐ¼Ð°ÐºÐ¸, Ð½Ð°Ð´ÐµÑÑ ÑÑÑÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÑÑÐµÐ»ÑÐºÐ¸,
ÑÐ°ÑÐ°ÐºÐ°Ð½Ñ Ð² Ð³Ð¾Ð»Ð¾Ð²Ðµ Ð¿ÑÐµÐ²ÑÐ°ÑÑÑÑÑ Ð² ÐºÑÑÐµÑÐ° ÐºÐ°ÑÐµÑÑ, ÐºÐ¾ÑÐ¾ÑÐ°Ñ ÐµÑÐµ Ð¿Ð°ÑÑ ÑÐ°ÑÐ¾Ð²
Ð½Ð°Ð·Ð°Ð´ Ð±ÑÐ»Ð° ÑÑÐºÐ²Ð¾Ð¹. Ð£ÑÐ¿ÐµÑÐ½Ð¾ Ð¿ÑÐ¾Ð¹Ð´ÐµÐ½Ð½Ð¾Ðµ Ð¸Ð½ÑÐµÑÐ²ÑÑ Ð² ÑÐ¾ÑÐ¾ÑÐµÐ¹ ÑÑÐ¾Ð»Ð¸ÑÐ½Ð¾Ðµ
ÐºÐ¾Ð¼Ð¿Ð°Ð½Ð¸Ð¸ Ð¿Ð¾ÑÐ»Ðµ Ð¶Ð¸Ð·Ð½Ð¸ Ð² Ð´ÐµÐ¿ÑÐµÑÑÐ¸Ð²Ð½Ð¾Ð¼ Ð³Ð¾ÑÐ¾Ð´ÐºÐµ ÑÑÐµÐ´Ð½ÐµÐ¹ Ð¿Ð¾Ð»Ð¾ÑÑ Ð Ð¾ÑÑÐ¸Ð¸ Ð±ÐµÐ·
Ð¾ÑÐ¾Ð±ÐµÐ½Ð½ÑÑ Ð¿ÐµÑÑÐ¿ÐµÐºÑÐ¸Ð² Ð²Ð½ÑÑÐ°ÐµÑ Ð¼ÑÑÐ»Ñ, ÑÑÐ¾ Ð²ÑÐµ Ð´Ð²ÐµÑÐ¸ Ð¾ÑÐºÑÑÑÑ. ÐÑÐ¾Ð´Ð²Ð¸Ð¶ÐµÐ½Ð¸Ðµ
ÑÐµÑÐµÐ· Ð¿Ð¾Ð»Ð³Ð¾Ð´Ð°, Ð´Ð¾Ð»Ð¶Ð½Ð¾ÑÑÑ senior developer ÑÐµÑÐµÐ· Ð³Ð¾Ð´, ÑÐ¾ÑÐºÐ¸ Ñ Ð±Ð¾Ð»ÑÑÐ¸Ñ
ÐºÐ¾Ð½ÑÐµÑÐµÐ½ÑÐ¸Ð¹ Ð·Ð° ÑÑÐµÑ ÑÐ°Ð±Ð¾ÑÐ¾Ð´Ð°ÑÐµÐ»Ñ, ÑÐ¾Ð±ÑÑÐ²ÐµÐ½Ð½Ð¾Ðµ Ð²ÑÑÑÑÐ¿Ð»ÐµÐ½Ð¸Ðµ ÐµÑÐµ ÑÐµÑÐµÐ·
Ð³Ð¾Ð´. ÐÑÐµ ÑÑÐ¾ Ð¿ÑÐµÐºÑÐ°ÑÐ½Ð¾ Ð¸ ÐºÑÑÐ¶Ð¸Ñ&amp;nbsp;Ð³Ð¾Ð»Ð¾Ð²Ñ.&lt;/p&gt;
&lt;p&gt;ÐÑÐ¾Ð±Ð»ÐµÐ¼Ð° ÑÐ¾Ð»ÑÐºÐ¾ Ð² ÑÐ¾Ð¼, ÑÑÐ¾ Ð² Ð¿Ð¾Ð»Ð½Ð¾ÑÑ ÐºÐ°ÑÐµÑÐ° Ð¿ÑÐµÐ²ÑÐ°ÑÐ¸ÑÑÑ Ð¾Ð±ÑÐ°ÑÐ½Ð¾ Ð²
ÑÑÐºÐ²Ñ. ÐÐ±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð¿ÑÐ¸Ð´ÐµÑ Ð¾ÑÐ¾Ð·Ð½Ð°Ð½Ð¸Ðµ, ÑÑÐ¾ ÑÐµÐ½ÑÐ¾ÑÐ¾Ð¼ ÑÐ´ÐµÐ»Ð°Ð»Ð¸ Ð² Ð´Ð²Ð°Ð´ÑÐ°ÑÑ
Ð´Ð²Ð° Ð³Ð¾Ð´Ð°, ÑÑÐ¾Ð±Ñ ÑÐ¾ÑÑ ÐºÐ°Ðº-ÑÐ¾ ÑÐ´ÐµÑÐ¶Ð°ÑÑ Ð¸ Ð·Ð°ÑÐºÐ½ÑÑÑ ÐºÐ°Ð´ÑÐ¾Ð²ÑÑ Ð´ÑÑÑ,
Ð¸Ð·Ð¼ÐµÐ½ÑÑÑÑÑ Ð¿ÑÐ¾ÑÑÑÐ°Ð½ÑÑÐ²ÐµÐ½Ð½Ð¾-Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾Ð¹ ÐºÐ¾Ð½ÑÐ¸Ð½ÑÑÐ¼ Ð¿ÑÐ¾ÐµÐºÑÐ° ÑÐ¶Ðµ Ð¼Ð½Ð¾Ð³Ð¸Ðµ
Ð¼ÐµÑÑÑÑ. Ð§ÑÐ¾ Ð°ÑÑÐ¸ÑÐµÐºÑÑÑÐ° Ð¿ÑÐ¾ÐµÐºÑÐ°, ÐºÐ¾ÑÐ¾ÑÑÑ Ð¿ÑÐµÐ´Ð»Ð¾Ð¶Ð¸Ð»Ð° ÐÐ¾Ð»ÑÑÐºÐ°-ÑÐµÐ½ÑÐ¾Ñ,
ÑÑÐ¾ Ð±Ð¾Ð»Ñ Ð¸ ÑÑÑÐ°Ð´Ð°Ð½Ð¸Ðµ, Ð½ÐµÑÐ¾Ð²Ð¼ÐµÑÑÐ¸Ð¼ÑÐµ Ñ ÑÐµÐ°Ð»ÑÐ½Ð¾ÑÑÑÑ. Ð§ÑÐ¾ Ð¾Ñ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼,
ÐºÐ¾Ð½ÐµÑÐ½Ð¾, Ð²ÑÐµÐ³Ð´Ð° Ð¼Ð¾Ð¶Ð½Ð¾ ÑÐ±ÐµÐ¶Ð°ÑÑ Ð½Ð° Ð´ÑÑÐ³Ð¾Ð¹ Ð±Ð°Ð», Ð¿Ð¾ ÑÐ¾ÑÐµÐ´ÑÑÐ²Ñ, Ð¸ Ð´Ð»Ñ &lt;span class="caps"&gt;CV&lt;/span&gt;
ÑÑÐ¾ Ð±ÑÐ´ÐµÑ, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹, Ð´Ð°Ð¶Ðµ Ð² Ð¿Ð»ÑÑ. ÐÐ¾ Ð³ÑÑÐ·Ñ Ð¿Ð¾Ð´ Ð½Ð¾Ð³ÑÑÐ¼Ð¸ Ð²ÑÐµ ÑÐ°Ð²Ð½Ð¾ Ð²ÑÐ´Ð°ÑÑ
Ð½ÐµÐ´Ð°Ð²Ð½Ð¾ Ð¾Ð±ÑÑÑÐ¸Ð¶ÐµÐ½Ð½ÑÐµ Ð¿Ð¾ Ð½Ð°ÐºÐ°Ð·Ð°Ð½Ð¸Ñ Ð¼Ð°ÑÐµÑÐ¸ 20 ÐºÑÑÑÐ¾Ð² ÑÐ¾Ð·. Ð¡ÑÐ¾Ð¸Ñ ÑÐ¾Ð»ÑÐºÐ¾
Ð¿Ð¾ÐºÐ¸Ð½ÑÑÑ Ð¾Ð±ÑÐµÑÑÐ²Ð¾ Ð´Ð²Ð°Ð´ÑÐ°ÑÐ¸Ð´Ð²ÑÑÐ»ÐµÑÐ½Ð¸Ñ&amp;nbsp;ÑÐµÐ½ÑÐ¾ÑÐ¾Ð².&lt;/p&gt;
&lt;p&gt;ÐÐ¾Ð´ÑÐ¼Ð°ÐµÑÑ, ÐºÐ°ÐºÐ¾Ðµ-ÑÐ¾ ÑÐ°Ð¼ Ð¾ÑÐ¾Ð·Ð½Ð°Ð½Ð¸Ðµ! ÐÑÑ. ÐÐ¾Ð¶Ð½Ð¾ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð°ÑÑ Ð¿ÐµÑÐµÐ¼ÐµÑÐ°ÑÑÑÑ
Ñ Ð±Ð°Ð»Ð° Ð½Ð° Ð±Ð°Ð», Ð·Ð°ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÑÑ Ð´ÐµÐ½ÑÐ³Ð¸ Ð¸ Ð¾ÑÑÐ²ÐµÑÐ¸Ð²Ð°ÑÑ ÐºÐ¾ÑÐ¾Ð½Ð¾Ð¹. ÐÑÐ¾ÑÑÐ¾
Ð¿Ð¾ÑÐ¾Ð¼Ñ ÑÑÐ¾ ÑÐ¿ÐµÑÐ¸ÑÐ¸ÐºÐ° ÑÑÐ½ÐºÐ° ÑÑÑÐ´Ð° Ð² Ð¸Ð½Ð´ÑÑÑÑÐ¸Ð¸ ÑÑÐ¾ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ. ÐÐ¾Ð¶Ð½Ð¾ Ð´Ð°Ð¶Ðµ
Ð½Ð° Ð±Ð°Ð»Ñ Ð¿Ð¾ÐºÐ°Ð·Ð°ÑÑ ÑÐµÐ±Ñ Ð½Ðµ Ð²ÐµÐ»Ð¸ÐºÐ¾ÑÐ²ÐµÑÑÐºÐ¾Ð¹ Ð´Ð°Ð¼Ð¾Ð¹, Ð° ÐºÐµÐ¼-ÑÐ¾ Ð²ÑÐ¾Ð´Ðµ &lt;span class="caps"&gt;GG&lt;/span&gt; Allin
Ð½Ð° ÑÑÐµÐ½Ðµ. Ð ÑÐ½Ð¾Ðº Ð¸ ÑÑÐ¾ Ð¿ÑÐ¾Ð³Ð»Ð¾ÑÐ¸Ñ. Ð ÐºÑÐ°Ð¹Ð½ÐµÐ¼ ÑÐ»ÑÑÐ°Ðµ Ð¼Ð¾Ð¶Ð½Ð¾ Ð¿Ð¾Ð¸ÑÐºÐ°ÑÑ
ÑÑÐ°ÑÑÐ°Ð¿ Ð¸Ð»Ð¸ Ð±Ð°Ð»Ñ Ð²Ð¾ Ð²ÑÐ¾ÑÐ¾Ð¼ Ð¿Ð¾ Ð²ÐµÐ»Ð¸ÑÐ¸Ð½Ðµ Ð³Ð¾ÑÐ¾Ð´Ðµ. Ð­ÑÐ¾ Ð²ÑÐµ, Ð±ÐµÐ·ÑÑÐ»Ð¾Ð²Ð½Ð¾,
ÑÐ°Ðº. ÐÐ¾ Ð¾Ñ Ð²Ð½ÑÑÑÐµÐ½Ð½ÐµÐ³Ð¾ Ð´Ð¸ÑÐºÐ¾Ð¼Ð¾ÑÑÑÐ° Ð¸ Ð´Ð¾Ð²Ð¾Ð»ÑÐ½Ð¾ ÑÐ°Ð½Ð½ÐµÐ³Ð¾ ÑÐ¿Ð¸ÑÐ°Ð½Ð¸Ñ Ð²
Ð¿Ð¾ÑÐ¾Ð»Ð¾Ðº ÑÑÐ¾ Ð²ÑÐµ Ð¼Ð¾Ð¶ÐµÑ Ð¸ Ð½Ðµ Ð·Ð°ÑÐ¸ÑÐ¸ÑÑ. ÐÐ° Ð¸ ÑÑÐ½Ð¾Ðº ÑÑÑÐ´Ð° Ð¼Ð¾Ð¶ÐµÑ
ÐºÐ°ÑÐ´Ð¸Ð½Ð°Ð»ÑÐ½Ð¾ Ð¸Ð·Ð¼ÐµÐ½Ð¸ÑÑÑÑ Ð² Ð¾Ð±Ð¾Ð·ÑÐ¸Ð¼Ð¾Ð¼ Ð±ÑÐ´ÑÑÐµÐ¼. ÐÑ ÑÑÐ¾Ð³Ð¾ Ð½Ðµ Ð·Ð°ÑÑÑÐ°ÑÐ¾Ð²Ð°Ð½&amp;nbsp;Ð½Ð¸ÐºÑÐ¾.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Ð§ÑÐ¾&amp;nbsp;Ð´ÐµÐ»Ð°ÑÑ?&lt;/h2&gt;
&lt;p&gt;ÐÐ¾-Ð¿ÐµÑÐ²ÑÑ, Ð¿Ð¾Ð½ÑÑÑ, ÑÑÐ¾ Ð¿ÑÐ¾Ð¿Ð°Ð³Ð°Ð½Ð´Ð° ÑÑÐ¿ÐµÑÐ° ÑÐ¸ÑÐ°Ð¶Ð¸ÑÑÐµÑ Ð¸ÑÑÐ¾ÑÐ¸Ð¸ ÐµÐ´Ð¸Ð½Ð¸Ñ Ð½Ð°
Ð²ÑÐµÑ Ð»ÑÐ´ÐµÐ¹. ÐÐ¾Ð»ÑÑÐ¸Ð½ÑÑÐ²Ð¾ Ð»ÑÐ´ÐµÐ¹ Ð¶Ð´ÐµÑ Ð¾Ð±ÑÑÐ½Ð°Ñ Ð¶Ð¸Ð·Ð½Ñ &amp;#8212; ÑÑÐ°ÑÐ¸ÑÑÐ¸ÑÐµÑÐºÐ¸ Ð¸Ñ
ÑÐ°Ð½ÑÑ ÑÐ°Ð·Ð±Ð¾Ð³Ð°ÑÐµÑÑ, ÑÑÐ°ÑÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½ÑÐ¼Ð¸ Ð·Ð²ÐµÐ·Ð´Ð°Ð¼Ð¸ Ð² ÑÐ²Ð¾ÐµÐ¼ Ð´ÐµÐ»Ðµ ÐºÑÐ°Ð¹Ð½Ðµ
Ð¼Ð°Ð»Ñ Ð´Ð°Ð¶Ðµ Ð² ÑÐ°Ð¼ÑÑ ÑÐ°Ð·Ð²Ð¸ÑÑÑ Ð¾Ð±ÑÐµÑÑÐ²Ð°Ñ (Ð¸Ð½Ð¾Ð³Ð´Ð° &amp;#8220;Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾ Ð² ÑÐ°Ð¼ÑÑ
ÑÐ°Ð·Ð²Ð¸ÑÑÑ Ð¾Ð±ÑÐµÑÑÐ²Ð°Ñ&amp;#8221;). ÐÐ»Ñ ÑÑÐ¿ÐµÑÐ° ÑÑÐµÐ±ÑÐµÑÑÑ ÑÐ´Ð°ÑÐ°, ÑÐ¾ÑÐ¾ÑÐ¸Ðµ ÑÑÐ°ÑÑÐ¾Ð²ÑÐµ
ÑÑÐ»Ð¾Ð²Ð¸Ñ Ð¸, ÑÐ°Ð¼Ð¾Ðµ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ, Ð¾Ð³ÑÐ¾Ð¼Ð½Ð°Ñ ÑÐ°Ð±Ð¾ÑÐ°. ÐÐ¾ÑÐ¾Ð¼Ñ ÑÑÐ¾ âgenius is one
percent inspiration, ninety-nine percent&amp;nbsp;perspiration.â&lt;/p&gt;
&lt;p&gt;ÐÐ¾-Ð²ÑÐ¾ÑÑÑ, Ð¿Ð¾Ð½ÑÑÑ, ÑÑÐ¾ Ð¼Ð¾Ð·Ð³ ÑÐµÐ»Ð¾Ð²ÐµÐºÐ° Ð½Ðµ ÑÐ°ÐºÐ¾Ð¹ ÑÐ¶ Ð¸ Ð·Ð°Ð¼ÐµÑÐ°ÑÐµÐ»ÑÐ½ÑÐ¹, ÐºÐ°Ðº
ÑÐ°ÑÑÐºÐ°Ð·ÑÐ²Ð°ÑÑ Ð½Ð° Ð²Ð°ÑÐµÐ¼ Ð»ÑÐ±Ð¸Ð¼Ð¾Ð¼ &lt;span class="caps"&gt;TED&lt;/span&gt; Talks. ÐÑ Ð²Ð¾ Ð¼Ð½Ð¾Ð³Ð¾Ð¼ Ð¿Ð¾Ð»Ð°Ð³Ð°ÐµÐ¼ÑÑ Ð½Ð°
Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð±ÐµÑÑÐ¾Ð·Ð½Ð°ÑÐµÐ»ÑÐ½ÑÐµ ÑÐµÐ°ÐºÑÐ¸Ð¸. ÐÐ°ÑÑÐ°Ð²Ð¸ÑÑ Ð¼Ð¾Ð·Ð³ ÑÑÐ¸ÑÑÑÑ ÑÐ»Ð¾Ð¶Ð½Ð¾
Ð¸ Ð±Ð¾Ð»ÑÐ½Ð¾. Ð§ÑÐ¾Ð±Ñ Ð¾ÑÐ²Ð¾Ð¸ÑÑ ÐºÐ°ÐºÐ¸Ðµ-ÑÐ¾ Ð½ÐµÑÑÐ¸Ð²Ð¸Ð°Ð»ÑÐ½ÑÐµ Ð½Ð°Ð²ÑÐºÐ¸ ÑÑÐµÐ±ÑÑÑÑÑ
Ð³Ð¾Ð´Ñ. Ð§Ð°ÑÐ»ÑÐ· ÐÐ°ÑÐ²Ð¸Ð½ Ð¿ÑÐ¾Ð²ÐµÐ» Ð¿Ð¾ÑÑÐ¸ 30 Ð»ÐµÑ Ð¸ÑÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ð¹, Ð¿ÑÐµÐ¶Ð´Ðµ ÑÐµÐ¼
Ð·Ð°ÐºÐ¾Ð½ÑÐ¸Ð» ÑÐ²Ð¾Ñ Ð·Ð½Ð°Ð¼ÐµÐ½Ð¸ÑÑÑ ÐºÐ½Ð¸Ð³Ñ âOn the Origin of Speciesâ. Ð
Ð¾Ð¿ÑÐ±Ð»Ð¸ÐºÐ¾Ð²Ð°Ð» ÐµÐµ Ð² Ð²Ð¾Ð·ÑÐ°ÑÑÐµ 50 Ð»ÐµÑ. ÐÐµÐ·ÑÑÐ»Ð¾Ð²Ð½Ð¾, Ð¾Ð½ Ð±Ñ Ð¿Ð¾Ð·Ð°Ð²Ð¸Ð´Ð¾Ð²Ð°Ð»
Ð´Ð²Ð°Ð´ÑÐ°ÑÐ¸Ð´Ð²ÑÑÐ»ÐµÑÐ½ÐµÐ¼Ñ ÑÐµÐ½ÑÐ¾ÑÑ, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ñ ÑÐ²ÐµÑÐµÐ½Ð½Ð¾ÑÑÑÑ ÑÑÐ¸Ñ Ð¶Ð¸Ð·Ð½Ð¸ Ð´ÑÑÐ³Ð¸Ñ
Ð´Ð²Ð°Ð´ÑÐ°ÑÐ¸Ð´Ð²ÑÑÐ»ÐµÑÐ½Ð¸Ñ ÑÐµÐ½ÑÐ¾ÑÐ¾Ð² Ð½Ð° ÑÐµÑÐ½Ð¸ÑÐµÑÐºÐ¾Ð¹&amp;nbsp;ÐºÐ¾Ð½ÑÐµÑÐµÐ½ÑÐ¸Ð¸.&lt;/p&gt;
&lt;p&gt;Ð-ÑÑÐµÑÑÐ¸Ñ, Ð½Ðµ Ð¿ÐµÑÐµÑÑÐ°Ð²Ð°ÑÑ ÑÑÐ¸ÑÑÑÑ Ð¸ Ð·Ð°Ð¿Ð°ÑÑÐ¸ÑÑ ÑÐµÑÐ¿ÐµÐ½Ð¸ÐµÐ¼. ÐÐ°Ð¶Ðµ ÐµÑÐ»Ð¸ Ð²Ð°Ð¼
36, Ð½Ð¾ Ð Ð¾ÑÐ½ÐµÑÑÑÑ Ð²Ñ Ð´Ð¾ ÑÐ¸Ñ Ð¿Ð¾Ñ Ð½Ðµ Ð¿Ð¾ÑÑÐ»Ð¸Ð»Ð¸. ÐÐ°ÑÐ²Ð¸Ð½, Ð² ÐºÐ¾Ð½ÑÐµ ÐºÐ¾Ð½ÑÐ¾Ð²,
ÑÑÐ¾ ÐºÐ°Ðº-ÑÐ¾ Ð¿ÐµÑÐµÐ¶Ð¸Ð». ÐÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ ÑÐ°Ð¼ÑÐ¹ Ð²Ð°Ð¶Ð½ÑÐ¹ Ð¿ÑÐ½ÐºÑ Ð¸Ð· Ð²ÑÐµÐ³Ð¾, ÑÑÐ¾
Ð·Ð´ÐµÑÑ&amp;nbsp;Ð½Ð°Ð¿Ð¸ÑÐ°Ð½Ð¾.&lt;/p&gt;
&lt;p&gt;Ð-ÑÐµÑÑÐ²ÐµÑÑÑÑ, Ð±ÐµÐ·ÑÑÐ»Ð¾Ð²Ð½Ð¾, Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÑÑÑ ÑÐ»Ð¾Ð¶Ð¸Ð²ÑÐ¸Ð¼Ð¸ÑÑ ÑÑÐ»Ð¾Ð²Ð¸ÑÐ¼Ð¸,
Ð¿ÑÐ¸ÐµÐ·Ð¶Ð°ÑÑ Ð½Ð° Ð²ÑÐµ Ð±Ð°Ð»Ñ Ð² ÑÐ²Ð¾ÐµÐ¹ Ð²Ð¾Ð»ÑÐµÐ±Ð½Ð¾Ð¹ ÑÑÐºÐ²Ðµ. Ð¢Ð¾Ð»ÑÐºÐ¾ Ð½Ðµ ÑÐ»Ð¸ÑÐºÐ¾Ð¼
Ð·Ð°Ð±ÑÐ²Ð°ÑÑÑÑ Ð¸ Ð²ÑÐ¿Ð¾Ð»Ð½ÑÑÑ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐ¸Ðµ Ð¿ÑÐ½ÐºÑÑ. Just in case. ÐÐ°Ð»Ñ Ð½Ðµ
Ð²ÐµÑÐ½Ñ. Ð Ð²Ð¾Ñ Ð·Ð½Ð°Ð½Ð¸Ñ Ñ Ð²Ð°Ñ Ð½Ð¸ÐºÑÐ¾ Ð½Ðµ&amp;nbsp;Ð¾ÑÐ½Ð¸Ð¼ÐµÑ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;ÐÐ¾ÑÐ»ÐµÑÐ»Ð¾Ð²Ð¸Ðµ&lt;/h2&gt;
&lt;p&gt;Ð¯ (Ð¿Ð¾ÐºÐ° ÐµÑÐµ) Ð½Ðµ Ð¾ÑÐµÐ½Ñ ÑÐºÐ»Ð¾Ð½ÐµÐ½ Ð¼Ð¾ÑÐ°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÑÑÐ²Ñ Ð¸ ÑÐµÐ¼ Ð±Ð¾Ð»ÐµÐµ
Ð³ÐµÐ½ÐµÑÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ ÐºÐ°ÐºÐ¸Ñ-ÑÐ¾ Ð¾ÑÐ´ÐµÐ»ÑÐ½ÑÑ Ð½ÐµÐ³Ð°ÑÐ¸Ð²Ð½ÑÑ ÑÐ²Ð»ÐµÐ½Ð¸Ð¹ Ð´Ð¾ Ð¼Ð°ÑÑÑÐ°Ð±Ð¾Ð²
Ð¿Ð¾ÐºÐ¾Ð»ÐµÐ½Ð¸Ñ. ÐÐ°Ð¿ÑÐ¾ÑÐ¸Ð², Ð¼Ð½Ðµ ÐºÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ Ð½ÑÐ½ÑÑÐ½ÐµÐµ Ð¿Ð¾ÐºÐ¾Ð»ÐµÐ½Ð¸Ðµ Ð²Ð¾ Ð¼Ð½Ð¾Ð³Ð¾Ð¼
Ð»ÑÑÑÐµ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐ¸Ñ. ÐÑ Ð° Ð² ÑÐµÐ¼-ÑÐ¾ ÑÐ°ÐºÐ¾Ðµ Ð¶Ðµ, Ð¿ÑÐ¾ÑÑÐ¾ Ð¾ÐºÐ°Ð·Ð°Ð²ÑÐµÐµÑÑ Ð² Ð½Ð¾Ð²ÑÑ
ÑÑÐ»Ð¾Ð²Ð¸ÑÑ. ÐÑÐ´Ð¸ Ð·Ð°Ð¼ÐµÑÐ°ÑÐµÐ»ÑÐ½Ð¾ Ð¿ÑÐ¸ÑÐ¿Ð¾ÑÐ°Ð±Ð»Ð¸Ð²Ð°ÑÑÑÑ Ðº Ð±ÑÑÑÑÑÐ¼ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸ÑÐ¼
ÑÑÐµÐ´Ñ, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð¾Ð½Ð¸ Ð¶Ð¸Ð²ÑÑ. Ð¥Ð¾ÑÑ Ð¸Ñ Ð¿ÑÐ¸ÑÐ¾Ð´Ð° Ð¸ Ð½Ðµ Ð¼ÐµÐ½ÑÐµÑÑÑ
Ð²ÐµÐºÐ°Ð¼Ð¸. ÐÐ¾ÑÑÐ¾Ð¼Ñ Ð¿Ð¾Ð»ÐµÐ·Ð½Ð¾ Ð·Ð½Ð°ÑÑ ÑÐ²Ð¾Ñ Ð¿ÑÐ¸ÑÐ¾Ð´Ñ (Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, Ð¿ÑÐ¾ ÑÐ¾, ÑÑÐ¾
ÑÑÐ¸ÑÑÑÑ Ð´Ð¾Ð»Ð³Ð¾ Ð¸ ÑÐ»Ð¾Ð¶Ð½Ð¾) Ð¸ ÐºÐ°Ð»Ð¸Ð±ÑÐ¾Ð²Ð°ÑÑ ÑÑÐ¸Ð¼Ð¸ Ð·Ð½Ð°Ð½Ð¸ÑÐ¼Ð¸ ÑÑ ÑÑÐµÐ´Ñ, Ð²
ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð½Ð°Ð¼ Ð¿Ð¾ÑÑÐ°ÑÑÐ»Ð¸Ð²Ð¸Ð»Ð¾ÑÑ Ð¶Ð¸ÑÑ (Ð³Ð´Ðµ Ð»ÐµÐ³ÐºÐ¾ ÑÐ°ÑÑÐ¸ÑÐ°Ð¶Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð¸ÑÑÐ¾ÑÐ¸Ñ
ÑÑÐ¿ÐµÑÐ° Ð¾ÑÐµÑÐµÐ´Ð½Ð¾Ð¹ ÐÐ¾Ð»ÑÑÐºÐ¸ Ð¸ Ð²ÑÐ´Ð°ÑÑ ÐµÐµ Ð·Ð° Ð¾Ð±ÑÐ´ÐµÐ½Ð½Ð¾ÑÑÑ). Ð ÐµÑÐµ Ð¿Ð¾Ð»ÐµÐ·Ð½Ð¾
Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð°ÑÑ ÑÑÐ¸ÑÑÑÑ, Ð½Ð°Ð±Ð¸ÑÐ°ÑÑÑÑ Ð¾Ð¿ÑÑÐ° Ð¸ Ð·Ð°Ð¿Ð°ÑÑÐ¸ÑÑ ÑÐµÑÐ¿ÐµÐ½Ð¸ÐµÐ¼. ÐÐ°Ð¶ÐµÑÑÑ,
Ð´Ð»Ñ Ð±Ð¾Ð»ÑÑÐ¸Ð½ÑÑÐ²Ð° Ð»ÑÐ´ÐµÐ¹ &amp;#8212; ÑÑÐ¾ ÐµÐ´Ð¸Ð½ÑÑÐ²ÐµÐ½Ð½ÑÐ¹ Ð²Ð°ÑÐ¸Ð°Ð½Ñ Ð´Ð¾ÑÑÐ¸ÑÑ ÑÑÐ¿ÐµÑÐ°,
ÐºÑÐ»ÑÑ ÐºÐ¾ÑÐ¾ÑÐ¾Ð³Ð¾&amp;nbsp;Ð²ÑÑÐ´Ñ.&lt;/p&gt;
&lt;p&gt;ÐÑÐ¼Ð°Ñ, ÑÑÐ¾ Ð±Ð¾Ð»ÑÑÐ¸Ð½ÑÑÐ²Ñ Ð»ÑÐ´ÐµÐ¹ ÑÑÐ¾Ñ ÑÐµÐºÑÑ Ð¿Ð¾ÐºÐ°Ð¶ÐµÑÑÑ Ð±Ð°Ð½Ð°Ð»ÑÐ½Ð¾ÑÑÑÑ, Ð¿Ð¾ÑÐ¾Ð¼Ñ
ÑÑÐ¾ Ð¾Ð½Ð¸ ÑÐ¾Ð²Ð½Ð¾ ÑÑÐ¸Ð¼Ð¸ ÑÐ¾Ð²ÐµÑÐ°Ð¼Ð¸ Ð¸ ÑÑÐºÐ¾Ð²Ð¾Ð´ÑÑÐ²ÑÑÑÑÑ Ð² ÑÐ²Ð¾ÐµÐ¹ Ð¶Ð¸Ð·Ð½Ð¸. ÐÑ Ð°
ÑÑÐ°ÑÑÐ²ÑÑÑ Ð² ÑÑÐ¾Ð¼ Ð¼Ð°ÑÐºÐ°ÑÐ°Ð´Ðµ ÐÐ¾Ð»ÑÑÐµÐº Ð¸ Ð¸Ð½Ð¾Ð³Ð´Ð° Ð¿ÐµÑÐµÐ¶Ð¸Ð²Ð°ÑÑ Ð·Ð°
Ð½ÐµÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ð½ÑÐµ Ðº 35 Ð³Ð¾Ð´Ð°Ð¼ Ð°Ð¼Ð±Ð¸ÑÐ¸Ð¸ Ð¿ÑÐ¾ÑÑÐ¾ Ð¿Ð¾ÑÐ¾Ð¼Ñ, ÑÑÐ¾ ÑÑÐ¾ ÑÑÐµÐ´Ð°
Ð´Ð¸ÐºÑÑÐµÑ ÑÑÐ»Ð¾Ð²Ð¸Ñ. Ð¡Ð»Ð¾Ð¶Ð½Ð¾ Ð½Ðµ Ð¿ÑÐ¾Ð¿Ð°ÑÐ½ÑÑÑ ÑÐµÐ¼, ÑÑÐ¾ Ð²Ð¸ÑÐ°ÐµÑ Ð² Ð²Ð¾Ð·Ð´ÑÑÐµ! ÐÑÐ´Ñ
ÑÐ°Ð´, ÐµÑÐ»Ð¸ ÑÐ°Ðº Ð¾Ð½Ð¾ Ð¸&amp;nbsp;ÐµÑÑÑ.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;P.S.&lt;/span&gt; Ð¢ÐµÐºÑÑ Ð½Ð°Ð¿Ð¸ÑÐ°Ð½ Ð¿Ð¾ÑÐ»Ðµ Ð¿ÑÐ¾ÑÐ¼Ð¾ÑÑÐ° ÑÑÐ¾Ð³Ð¾ &lt;a class="reference external" href="https://www.youtube.com/watch?v=xlffUj02ea4&amp;amp;feature=youtu.be&amp;amp;start=1040"&gt;Ð²Ð¸Ð´ÐµÐ¾&lt;/a&gt;. ÐÐµ Ð¼Ð¾Ð³Ñ Ñ Ð½Ð¸Ð¼
ÑÐ¾Ð³Ð»Ð°ÑÐ¸ÑÑÑÑ Ð¿Ð¾Ð»Ð½Ð¾ÑÑÑÑ. ÐÑÑÑ Ð² Ð½ÐµÐ¼ Ð½Ð¾ÑÐºÐ¸ Ð±ÑÑÐ·Ð¶Ð°Ð½Ð¸Ñ Ð¸ Ð¾Ð±Ð¾Ð±ÑÐµÐ½Ð¸Ñ. ÐÐ¾
Ð¿Ð¾ÑÐ¼Ð¾ÑÑÐµÑÑ ÐµÐ³Ð¾ ÑÑÐ¾Ð¸Ñ. Ð¥Ð¾ÑÑ Ð±Ñ ÑÑÐ¾Ð±Ñ ÑÐ²Ð¸Ð´ÐµÑÑ, ÐºÐ°Ðº Ð´ÑÑÐ³Ð¸Ðµ ÑÐ°Ð·Ð¾Ð³ÑÐµÑÑÐµ
ÑÑÐµÑÑ ÑÑÑÐ°Ð´Ð°ÑÑ Ð¾Ñ ÑÐµÑ Ð¶Ðµ&amp;nbsp;Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ÐºÑÐ»ÑÑÑÑÐ°"></category><category term="ru"></category></entry><entry><title>Helm stable/prometheus-operator: adding new scraping targets andÂ troubleshooting</title><link href="https://blog.pilosus.org/posts/2019/06/01/prometheus-operator-no-active-targets/" rel="alternate"></link><published>2019-06-01T14:12:00+03:00</published><updated>2019-06-01T14:12:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-06-01:/posts/2019/06/01/prometheus-operator-no-active-targets/</id><summary type="html">&lt;p class="first last"&gt;How to add new services for Prometheus to scrape and what to
do if no active targets found. Post covers Prometheus
deployed in Kubernetes cluster using Helm
stable/prometheus-operator&amp;nbsp;chart.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today I Learned (&lt;span class="caps"&gt;TIL&lt;/span&gt;) that Kubernetes named ports usage may be quite&amp;nbsp;frustrating.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve deployed monitoring stack (Prometheus, Grafana) in
Kubernetes using Helm &lt;a class="reference external" href="https://github.com/helm/charts/tree/master/stable/prometheus-operator"&gt;stable/prometheus-operator&lt;/a&gt;. Setting up
monitoring for Kubernetes cluster itself is covered by &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-digitalocean-kubernetes-cluster-monitoring-with-helm-and-prometheus-operator"&gt;this&lt;/a&gt;
wonderful guide. But for setting up monitoring for other services one
need to learn what &lt;a class="reference external" href="https://cloud.google.com/blog/products/containers-kubernetes/best-practices-for-building-kubernetes-operators-and-stateful-apps"&gt;Kubernetes Operator&lt;/a&gt; is, and create his/her own
&lt;tt class="docutils literal"&gt;ServiceMonitor&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Prometheus-Operator&lt;/span&gt;&lt;/tt&gt; (see
&lt;a class="reference external" href="https://github.com/helm/charts/tree/master/stable/prometheus-operator"&gt;stable/prometheus-operator&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ServiceMotitor&lt;/tt&gt; is a custom resource. It tells Prometheus what k8s
&lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; exposes metrics and where: service label selectors, its
namespace, path, port, etc. Say, we&amp;#8217;ve got a web application
&lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; namespace with label &lt;tt class="docutils literal"&gt;app: pili&lt;/tt&gt; that
exposes &lt;tt class="docutils literal"&gt;/metrics&lt;/tt&gt; endpoint on the named port called &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; . We
are going to deploy &lt;tt class="docutils literal"&gt;ServiceMonitor&lt;/tt&gt; for Prometheus to scrape the
metrics every 15 seconds in &lt;tt class="docutils literal"&gt;monitoring&lt;/tt&gt; namespace and with certain
labels. Then we apply a&amp;nbsp;manifest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ServiceMonitor&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;monitoring-pili&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;monitoring&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili-service-monitor&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchLabels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Target app service&lt;/span&gt;
      &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili&lt;/span&gt;
  &lt;span class="nt"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;15s&lt;/span&gt;
    &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/metrics&lt;/span&gt;
    &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uwsgi&lt;/span&gt;
  &lt;span class="nt"&gt;namespaceSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;matchNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following this steps I&amp;#8217;m sucessfully deployed a few service monitors:
for a PostgreSQL cluster, RabbitMQ, ElasticSearch, etc. All of them
allowed Prometheus to scrape metrics just as expected. But my own
application still showed 0 active targets in Prometheus. I could
manually &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; my app service&amp;#8217;s &lt;tt class="docutils literal"&gt;/metrics&lt;/tt&gt; endpoint and see that
all the metrics are exposed correctly. Still Prometheus was unable to
scrape&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I doublechecked label selectors as they often happen to be a culrpit
(see this &lt;a class="reference external" href="https://stackoverflow.com/questions/52991038/how-to-create-a-servicemonitor-for-prometheus-operator"&gt;StackOverflow&lt;/a&gt; question). Everything was fine. I could see
that my app&amp;#8217;s &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; exposed Kubernetes endpoints&amp;nbsp;correctly:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl get endpoint --namespace default
...
pili  10.244.0.136:8080,10.244.0.144:8080,10.244.0.185:8080  6d16h
...
&lt;/pre&gt;
&lt;p&gt;Eventually, it turned out that &lt;tt class="docutils literal"&gt;ServiceMonitor&lt;/tt&gt; didn&amp;#8217;t see my app
service&amp;#8217;s &lt;strong&gt;named port&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;My &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; manifest look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
    &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
    &lt;span class="nt"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uwsgi&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili-web&lt;/span&gt;
    &lt;span class="nt"&gt;tier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In that case &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; targeted named port &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; from app&amp;#8217;s
&lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;. The port was also used in &lt;tt class="docutils literal"&gt;Ingress&lt;/tt&gt; sucessfully:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
...
- backend:
    serviceName: pili
    servicePort: uwsgi
...
&lt;/pre&gt;
&lt;p&gt;It wasn&amp;#8217;t untill I &lt;em&gt;explicitly&lt;/em&gt; named the port (with the same name) in
&lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; that &lt;tt class="docutils literal"&gt;ServiceMonitor&lt;/tt&gt; could discover my target. So I
rewrote my &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; manifest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili&lt;/span&gt;
  &lt;span class="nt"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uwsgi&lt;/span&gt;
    &lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
    &lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
    &lt;span class="nt"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uwsgi&lt;/span&gt;
  &lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pili-web&lt;/span&gt;
    &lt;span class="nt"&gt;tier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the only change that really helped was this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   ports:
&lt;span class="gd"&gt;-  - protocol: TCP&lt;/span&gt;
&lt;span class="gi"&gt;+  - name: uwsgi&lt;/span&gt;
&lt;span class="gi"&gt;+    protocol: TCP&lt;/span&gt;
     port: 8080
     targetPort: uwsgi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Service&amp;#8217;s port should be explicitly named even if has the same name as
target port&amp;#8217;s name. &lt;tt class="docutils literal"&gt;ServiceMonitor&lt;/tt&gt; understands only explicitly
named &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; ports, although other entities, e.g. an &lt;tt class="docutils literal"&gt;Ingress&lt;/tt&gt;,
work well without explicit naming.&amp;nbsp;Beware!&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;P.S.&lt;/span&gt; At the time of writing I used &lt;tt class="docutils literal"&gt;kubectl v1.14.2&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;helm v2.14.0&lt;/tt&gt;.&lt;/p&gt;
</content><category term="k8s"></category><category term="helm"></category><category term="prometheus"></category><category term="kubernetes-operator"></category><category term="til"></category></entry><entry><title>Grafana Dashboard for Prometheus official Python client with Flask AppÂ metrics</title><link href="https://blog.pilosus.org/posts/2019/06/01/grafana-dashboard-flask-app/" rel="alternate"></link><published>2019-06-01T11:00:00+03:00</published><updated>2019-06-01T20:50:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-06-01:/posts/2019/06/01/grafana-dashboard-flask-app/</id><summary type="html">&lt;p class="first last"&gt;A dashboard with 12 panels showing &lt;span class="caps"&gt;RPS&lt;/span&gt;, latency, errors for
web app&amp;#8217;s endpoints as well as host and app&amp;#8217;s resource usage
and some extra&amp;nbsp;details.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve just &lt;a class="reference external" href="https://github.com/pilosus/prometheus-client-python-app-grafana-dashboard"&gt;open-sourced&lt;/a&gt; my Grafana dashboard. The dashboard designed
for a Flask web application that exposes metrics with
my &lt;a class="reference external" href="https://github.com/pilosus/flask_prometheus_metrics"&gt;flask_prometheus_metrics&lt;/a&gt; Flask&amp;nbsp;extension.&lt;/p&gt;
&lt;p&gt;Dashboard aimed at the apps deployed with Kubernetes, although it can
be easily tweaked to be&amp;nbsp;infrastructure-agnostic.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-1.png"&gt;&lt;img alt="Grfana dashboard: RPS and latency panels" class="responsive" src="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-1.png" /&gt;&lt;/a&gt;
&lt;p&gt;12 dasboard&amp;#8217;s panels covers the following&amp;nbsp;metrics:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Requests per second per host, endpoint, &lt;span class="caps"&gt;HTTP&lt;/span&gt; method&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Latency&lt;/li&gt;
&lt;li&gt;Percentiles (latency within which certain percent of requests&amp;nbsp;served)&lt;/li&gt;
&lt;li&gt;Number of 4xx, 5xx errors per&amp;nbsp;second&lt;/li&gt;
&lt;li&gt;Error count by&amp;nbsp;endpoint&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CPU&lt;/span&gt; usage per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;Memory usage per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;Open file descriptors per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;App&amp;#8217;s uptime per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;App&amp;#8217;s version per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;App&amp;#8217;s deployment environment (e.g. development, staging, production) per&amp;nbsp;host&lt;/li&gt;
&lt;li&gt;Python interpretor version per&amp;nbsp;host&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;a class="reference external image-reference" href="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-2.png"&gt;&lt;img alt="Grfana dashboard: errors and resource usage" class="responsive" src="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-2.png" /&gt;&lt;/a&gt;
&lt;p&gt;Dashboard also provides&amp;nbsp;variables:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Prometheus&amp;nbsp;datasource&lt;/li&gt;
&lt;li&gt;Time&amp;nbsp;interval&lt;/li&gt;
&lt;li&gt;Kubernetes pod&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;App&amp;#8217;s&amp;nbsp;endpoint&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;method&lt;/li&gt;
&lt;li&gt;Percentile&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; status code for&amp;nbsp;errors&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;a class="reference external image-reference" href="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-3.png"&gt;&lt;img alt="Grfana dashboard: app's information" class="responsive" src="https://raw.githubusercontent.com/pilosus/prometheus-client-python-app-grafana-dashboard/master/docs/flask-app-3.png" /&gt;&lt;/a&gt;
&lt;p&gt;The variables allow to change some panels charts grouing, intervals,
labels&amp;nbsp;selection.&lt;/p&gt;
&lt;p&gt;Usage is&amp;nbsp;easy:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://github.com/pilosus/flask_prometheus_metrics"&gt;flask_prometheus_metrics&lt;/a&gt; exporter to your Flask&amp;nbsp;application&lt;/li&gt;
&lt;li&gt;Make Prometheus scraping your app&amp;#8217;s &lt;tt class="docutils literal"&gt;/metrics&lt;/tt&gt; endpoint&lt;/li&gt;
&lt;li&gt;Import &lt;a class="reference external" href="https://github.com/pilosus/prometheus-client-python-app-grafana-dashboard/blob/master/flask-web-app.json"&gt;flask-web-app.json&lt;/a&gt; at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://&amp;lt;your-grafana-domain&amp;gt;.tld/dashboard/import&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do not deploy your app in Kubernetes you may need to tweak
&lt;a class="reference external" href="https://github.com/pilosus/prometheus-client-python-app-grafana-dashboard/blob/master/flask-web-app.json"&gt;flask-web-app.json&lt;/a&gt; &lt;tt class="docutils literal"&gt;pod&lt;/tt&gt; labels to meet your needs. Instead of
&lt;tt class="docutils literal"&gt;pod&lt;/tt&gt; you may use &lt;tt class="docutils literal"&gt;instance&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;hostname&lt;/tt&gt; or other label name
depending on how your Prometheus handle your app&amp;#8217;s&amp;nbsp;hostname.&lt;/p&gt;
</content><category term="prometheus"></category><category term="grafana"></category><category term="visualization"></category><category term="metrics"></category></entry><entry><title>Pelican plugin: word count and reading timeÂ statistics</title><link href="https://blog.pilosus.org/posts/2019/05/28/pelican-plugin-word-count/" rel="alternate"></link><published>2019-05-28T12:03:00+03:00</published><updated>2019-05-28T12:03:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-28:/posts/2019/05/28/pelican-plugin-word-count/</id><summary type="html">&lt;p class="first last"&gt;An open-source plugin for Python Pelican blog platform. It
extends blog posts with reading statistics: number of words
and reading time in&amp;nbsp;minutes.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;#8217;ve just released a tiny library for &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/index.html"&gt;Pelican&lt;/a&gt; blog platform called
&lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_word_count/"&gt;word count&lt;/a&gt;. It&amp;#8217;s a plugin that extends articles and pages with the
basic text statistics: number of words and approximate reading time in
minutes. You can use it then in your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/tt&gt; template. My own
&lt;a class="reference external" href="https://github.com/pilosus/pilosus-pelican-theme/"&gt;theme&lt;/a&gt; supports it&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;It turned out that there is another plugin called &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/post_stats"&gt;post_stats&lt;/a&gt;. It
provides even more extensive stats. But I think it&amp;#8217;s an overkill for
my purposes: I don&amp;#8217;t need text readability features, they won&amp;#8217;t work
for non-English text, they slow down site generation. I also suspect
that &lt;tt class="docutils literal"&gt;post_stats&lt;/tt&gt; is run against all the contents, including
non-text ones, which is also not so good for plugin&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_word_count/"&gt;word count&lt;/a&gt; plugin explicitly runs against text entities
(articles, pages, drafts and translations). It calculates basic
statistics I need for my blog. And that&amp;#8217;s&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I prefer to add Pelican plugins as &lt;tt class="docutils literal"&gt;git submodule&lt;/tt&gt;. It makes it
easier to &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; the entire blog with all its themes and
plugins on the new machine. It&amp;#8217;s also make it easier to version
plugins and themes you use. Just check out your submodule to the
version needed. Check out my article &lt;a class="reference external" href="https://blog.pilosus.org/posts/2019/05/01/pelican-blog-up-and-running/"&gt;Pelican blog: up and running&lt;/a&gt; for more&amp;nbsp;details.&lt;/p&gt;
&lt;p&gt;You can donwload (or better &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt;) &lt;tt class="docutils literal"&gt;word_count&lt;/tt&gt; plugin on
the &lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_word_count/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content><category term="pelican"></category><category term="blog"></category><category term="python"></category><category term="plugin"></category></entry><entry><title>Kubernetes Ingress Troubleshooting: Error Obtaining Endpoints forÂ Service</title><link href="https://blog.pilosus.org/posts/2019/05/26/k8s-ingress-troubleshooting/" rel="alternate"></link><published>2019-05-26T12:00:00+03:00</published><updated>2019-05-26T12:00:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-26:/posts/2019/05/26/k8s-ingress-troubleshooting/</id><summary type="html">&lt;p class="first last"&gt;Kubernetes introduces a bunch of abstractions. It&amp;#8217;s easy to
mess up with them in your manifest files. Yet Kubernetes
provides great tools for troubleshooting. Here is how you
can tackle problems with Ingress and Service&amp;nbsp;resources.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently I&amp;#8217;ve set up an &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes"&gt;Nginx Ingress Controller&lt;/a&gt; on my DigitalOcean
Kubernetes cluster. It&amp;#8217;s make up of a replica set of pods that run an
Nginx web server and watch for &lt;tt class="docutils literal"&gt;Ingress&lt;/tt&gt; resource
deployment. Controller also fires up a &lt;tt class="docutils literal"&gt;LoadBalancer&lt;/tt&gt; service that
routes and balances external traffic to the Nginx pods. In turn Nginx
pods route traffic to your app pods in accordance with rules from
app&amp;#8217;s Ingress manifest. All in all, the whole topology is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://blog.pilosus.org/images/ingress.png"&gt;&lt;img alt="Kubernetes cluster with Nginx Ingress Controller" class="responsive" src="https://blog.pilosus.org/images/ingress.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;The problem is Kubernetes uses quite a few abstractions (Pods,
Deployments, Services, Ingress, Roles, etc.) so that it&amp;#8217;s easy to make
a mistake. The good news is Kubernetes gives you great tools to
troubleshoot problems you have bumped into. In my case the first
response I&amp;#8217;ve got after I set up an Ingress Controller was Nginx&amp;#8217;s 503
error code (service temporarily unavailable). Here is how I&amp;#8217;ve fixed&amp;nbsp;it.&lt;/p&gt;
&lt;div class="section" id="kubernetes-nginx-ingress-controller-troubleshooting"&gt;
&lt;h2&gt;Kubernetes Nginx Ingress Controller&amp;nbsp;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s assume we are using &lt;a class="reference external" href="https://github.com/kubernetes/ingress-nginx"&gt;Kubernetes Nginx Ingress Controller&lt;/a&gt; as
there are other implementations too. Its components get deployed into
their own &lt;tt class="docutils literal"&gt;Namespace&lt;/tt&gt; called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ingress-nginx&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The first thing you are going to see to find out why a service
responds with 503 status code is Nginx logs. Let&amp;#8217;s see a list of pods
with&amp;nbsp;Nginx:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ~ kubectl get pods --namespace ingress-nginx
NAME                                        READY   STATUS    RESTARTS   AGE
nginx-ingress-controller-5694ccb578-l82hc   1/1     Running   0          21h
&lt;/pre&gt;
&lt;p&gt;Having only a signle pod it&amp;#8217;s easier to skim through the logs with
&lt;tt class="docutils literal"&gt;kubectl logs&lt;/tt&gt;. If there were multiple pods it would be much more
convenient to have &lt;span class="caps"&gt;ELK&lt;/span&gt; (or &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-elasticsearch-fluentd-and-kibana-efk-logging-stack-on-kubernetes"&gt;&lt;span class="caps"&gt;EFK&lt;/span&gt;&lt;/a&gt;) stack running in the&amp;nbsp;cluster.&lt;/p&gt;
&lt;p&gt;Looking up the log we&amp;nbsp;see:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl logs -f nginx-ingress-controller-5694ccb578-l82hc --namespace ingress-nginx
...
Error obtaining Endpoints for Service &amp;quot;&amp;lt;namespace&amp;gt;/&amp;lt;your-app-service&amp;gt;&amp;quot;:
no object matching key &amp;quot;&amp;lt;namespace&amp;gt;/&amp;lt;your-app-service&amp;gt;&amp;quot; in local store
...
&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s see what endpoints we&amp;nbsp;have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl get endpoints --namespace &amp;lt;namespace&amp;gt;
...
&amp;lt;namespace&amp;gt; &amp;lt;your-app-service&amp;gt;  &amp;lt;none&amp;gt; 21h
...
&lt;/pre&gt;
&lt;p&gt;Indeed, our service have no endpoints. That means that a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;Service&lt;/a&gt;
deployed to expose your app&amp;#8217;s pods doesn&amp;#8217;t actually have a virtual &lt;span class="caps"&gt;IP&lt;/span&gt;
address. There are two cases when a service doesn&amp;#8217;t have an &lt;span class="caps"&gt;IP&lt;/span&gt;: it&amp;#8217;s
either &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services"&gt;headless&lt;/a&gt; or you have messed up with &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"&gt;label selectors&lt;/a&gt;.
&lt;strong&gt;Check your label selectors carefully!&lt;/strong&gt; You know what you&amp;#8217;re doing
when using headless services. So most likely it&amp;#8217;s a wrong label name
or value that doesn&amp;#8217;t match your app&amp;#8217;s pods! So was in my own case, by
the&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Once you fixed your labels reapply your app&amp;#8217;s service and check
endpoints once&amp;nbsp;again:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl get endpoints --namespace &amp;lt;namespace&amp;gt;
...
&amp;lt;namespace&amp;gt;  &amp;lt;your-app-service&amp;gt;  10.244.0.136:8080,10.244.0.144:8080,10.244.0.185:8080  21h
...
&lt;/pre&gt;
&lt;p&gt;Now our service exposes three local &lt;span class="caps"&gt;IP&lt;/span&gt;:port pairs of type
&lt;tt class="docutils literal"&gt;ClusterIP&lt;/tt&gt;! &lt;tt class="docutils literal"&gt;ClusterIP&lt;/tt&gt; is a &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"&gt;service type&lt;/a&gt; that fits best to
the setup with an Ingress Controller and a Load Balancer routing
external traffic to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Request to a service now returns 200 &lt;span class="caps"&gt;OK&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="k8s"></category><category term="ingress"></category><category term="digitalocean"></category></entry><entry><title>Kubernetes Persistent Volumes: How to List and Copy Files andÂ Directories</title><link href="https://blog.pilosus.org/posts/2019/05/24/k8s-volumes-list-copy/" rel="alternate"></link><published>2019-05-24T20:15:00+03:00</published><updated>2019-05-24T20:15:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-24:/posts/2019/05/24/k8s-volumes-list-copy/</id><summary type="html">&lt;p&gt;You have created a Kubernetes workload, e.g. &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;, that uses
a &lt;tt class="docutils literal"&gt;PersistentVolume&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;PersistentVolumeClaim&lt;/tt&gt;. It&amp;#8217;s
provisioned by your cloud platform, say, DigitalOcean. You want to
know what space is available to you, you want to browse files and
directories on your Volume, and you want to copy â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;You have created a Kubernetes workload, e.g. &lt;tt class="docutils literal"&gt;Deployment&lt;/tt&gt;, that uses
a &lt;tt class="docutils literal"&gt;PersistentVolume&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;PersistentVolumeClaim&lt;/tt&gt;. It&amp;#8217;s
provisioned by your cloud platform, say, DigitalOcean. You want to
know what space is available to you, you want to browse files and
directories on your Volume, and you want to copy something from the
Volume to your host machine. How do you do&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;First, find out your pvc&amp;#8217;s &lt;tt class="docutils literal"&gt;mountPath&lt;/tt&gt;. Your data sits
there. Second, you can access it from the pod that uses the
&lt;tt class="docutils literal"&gt;PersistentVolumeClaim&lt;/tt&gt;. Fire up a terminal on the pod and use your
favourite tools like &lt;tt class="docutils literal"&gt;ls&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;df&lt;/tt&gt; to list files or see stats of
the volume usage. Just make sure that an image your pod container is
using has all the tools you&amp;nbsp;need.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# open bash on the pod&lt;/span&gt;
$ kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; -it redis-master-0 bash

&lt;span class="c1"&gt;# see disk usage stats&lt;/span&gt;
&lt;span class="c1"&gt;# volume is mounted under /data&lt;/span&gt;
I have no name!@redis-master-0:/$ df -h
Filesystem                                                                Size  Used Avail Use% Mounted on
overlay                                                                   158G  &lt;span class="m"&gt;6&lt;/span&gt;.5G  145G   &lt;span class="m"&gt;5&lt;/span&gt;% /
tmpfs                                                                      64M     &lt;span class="m"&gt;0&lt;/span&gt;   64M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev
tmpfs                                                                     &lt;span class="m"&gt;3&lt;/span&gt;.9G     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;.9G   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/vda1                                                                 158G  &lt;span class="m"&gt;6&lt;/span&gt;.5G  145G   &lt;span class="m"&gt;5&lt;/span&gt;% /health
/dev/disk/by-id/scsi-0DO_Volume_pvc-ae31a80d-7b23-11e9-bffb-0ab3124b7b1c  &lt;span class="m"&gt;7&lt;/span&gt;.9G   36M  &lt;span class="m"&gt;7&lt;/span&gt;.4G   &lt;span class="m"&gt;1&lt;/span&gt;% /data
shm                                                                        64M     &lt;span class="m"&gt;0&lt;/span&gt;   64M   &lt;span class="m"&gt;0&lt;/span&gt;% /dev/shm
tmpfs                                                                     &lt;span class="m"&gt;3&lt;/span&gt;.9G   12K  &lt;span class="m"&gt;3&lt;/span&gt;.9G   &lt;span class="m"&gt;1&lt;/span&gt;% /run/secrets/kubernetes.io/serviceaccount
tmpfs                                                                     &lt;span class="m"&gt;3&lt;/span&gt;.9G     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;.9G   &lt;span class="m"&gt;0&lt;/span&gt;% /proc/acpi
tmpfs                                                                     &lt;span class="m"&gt;3&lt;/span&gt;.9G     &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;.9G   &lt;span class="m"&gt;0&lt;/span&gt;% /sys/firmware

&lt;span class="c1"&gt;# list files&lt;/span&gt;
$ ls -l /data
total &lt;span class="m"&gt;24&lt;/span&gt;
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;   &lt;span class="m"&gt;130&lt;/span&gt; May &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:23 appendonly.aof
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;   &lt;span class="m"&gt;175&lt;/span&gt; May &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:22 dump.rdb
drwxrws--- &lt;span class="m"&gt;2&lt;/span&gt; root &lt;span class="m"&gt;1001&lt;/span&gt; &lt;span class="m"&gt;16384&lt;/span&gt; May &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:22 lost+found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Third, you can copy files or directories from or to a Kubernetes pod using &lt;tt class="docutils literal"&gt;kubectl cp&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl cp default/redis-master-0:/data/dump.rdb /home/vitaly/Downloads/dump.rdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;tt class="docutils literal"&gt;kubectl cp &lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt; for more&amp;nbsp;details.&lt;/p&gt;
</content><category term="k8s"></category><category term="kubectl"></category><category term="digitalocean"></category></entry><entry><title>Helm stable/redis chart: slave unable to connect toÂ master</title><link href="https://blog.pilosus.org/posts/2019/05/20/helm-stable-redis-slave-crashloopbackoff/" rel="alternate"></link><published>2019-05-20T19:20:00+03:00</published><updated>2019-05-20T19:20:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-20:/posts/2019/05/20/helm-stable-redis-slave-crashloopbackoff/</id><summary type="html">&lt;p class="first last"&gt;Things to take care of when installing Helm&amp;#8217;s stable/redis
chart with master-slave topology&amp;nbsp;enabled&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently I&amp;#8217;ve tried to install &lt;a class="reference external" href="https://github.com/helm/charts/tree/master/stable/redis"&gt;stable/redis&lt;/a&gt; Helm chart version
8.0.1. I used production-ready values taken from the &lt;a class="reference external" href="https://github.com/helm/charts/blob/master/stable/redis/values-production.yaml"&gt;repo&lt;/a&gt; and
slightly modified for needs. I used enabled by default clusterisation,
but with only one slave node instead of&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;The release deployed sucessfully, but the slave node kept having
problem with liveness probe that eventually led to a
CrashLoopBackoff. The logs showed that my slave node is &amp;#8220;Unable to
connect to &lt;span class="caps"&gt;MASTER&lt;/span&gt;&amp;#8221;, although I could easily connect to the master from
the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;redis-client&lt;/span&gt;&lt;/tt&gt; node with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;redis-cli&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl run --namespace default redis-client --rm --tty -i --restart='Never' \
  --env REDIS_PASSWORD=my-redis-password \
 --image docker.io/bitnami/redis:5.0.5 -- bash

# redis-cli -h redis-master -a my-redis-password
redis-master:6379&amp;gt;
&lt;/pre&gt;
&lt;p&gt;It turned out that a &lt;tt class="docutils literal"&gt;networkPolicy&lt;/tt&gt; section in
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;values-production.yaml&lt;/span&gt;&lt;/tt&gt; was a culprit. &lt;tt class="docutils literal"&gt;networkPolicy.enable&lt;/tt&gt; is
set to &lt;tt class="docutils literal"&gt;true&lt;/tt&gt;, but &lt;tt class="docutils literal"&gt;networkPolicy.allowExternal: true&lt;/tt&gt; is
commented evaluating to &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; by default. That makes redis nodes
only accessible from the pods with a label &lt;tt class="docutils literal"&gt;{{ template
&amp;quot;redis.fullname&amp;quot; . &lt;span class="pre"&gt;}}-client:&lt;/span&gt; &amp;quot;true&amp;quot;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So make master accessible to slave you&amp;nbsp;either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;networkPolicy.enable: false&lt;/tt&gt; to turn off &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/"&gt;NetworkPolicy&lt;/a&gt;,&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;networkPolicy.allowExternal: true&lt;/tt&gt; (i.e. by commenting it out
in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;values-production.yaml&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#8217;s it. No more failed liveness probes or CrashLoopBackoff. It&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;P.S.&lt;/span&gt; I think that production values example in &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt; should
probably be consistent. For example,
&lt;a class="reference external" href="https://github.com/helm/charts/blob/master/stable/postgresql/values-production.yaml"&gt;stable/postgresql production values file&lt;/a&gt;&amp;nbsp;contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;networkPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
  &lt;span class="nt"&gt;allowExternal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;while &lt;a class="reference external" href="https://github.com/helm/charts/blob/master/stable/redis/values-production.yaml"&gt;stable/redis production values file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;networkPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="c1"&gt;#allowExternal: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="k8s"></category><category term="helm"></category><category term="chart"></category><category term="redis"></category></entry><entry><title>Helm Cheat Sheet: Personal Top of the Little Known Commands andÂ Features</title><link href="https://blog.pilosus.org/posts/2019/05/20/helm-cheat-sheet-little-known-commands/" rel="alternate"></link><published>2019-05-20T11:12:00+03:00</published><updated>2019-05-20T15:50:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-20:/posts/2019/05/20/helm-cheat-sheet-little-known-commands/</id><summary type="html">&lt;p&gt;Helm is a package manager for Kubernetes. It&amp;#8217;s got an outstanding
&lt;a class="reference external" href="https://helm.sh/"&gt;official documentation&lt;/a&gt; and tons of tutorials on the
internet. Nonetheless Helm has some helpful commands and features that
are easily overlooked when reading the documentation. I won&amp;#8217;t even try
to cover them all, as it&amp;#8217;s quite â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Helm is a package manager for Kubernetes. It&amp;#8217;s got an outstanding
&lt;a class="reference external" href="https://helm.sh/"&gt;official documentation&lt;/a&gt; and tons of tutorials on the
internet. Nonetheless Helm has some helpful commands and features that
are easily overlooked when reading the documentation. I won&amp;#8217;t even try
to cover them all, as it&amp;#8217;s quite subjective what to count as
&amp;#8220;helpful&amp;#8221;. What I will try to do though is to give a direction on how
to find such features by&amp;nbsp;yourself.&lt;/p&gt;
&lt;div class="section" id="cli-help"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;nbsp;Help&lt;/h2&gt;
&lt;p&gt;Just like &lt;tt class="docutils literal"&gt;kubectl&lt;/tt&gt; and &lt;a class="reference external" href="https://blog.pilosus.org/posts/2019/05/18/minikube-cheat-sheet/"&gt;minikube&lt;/a&gt; Helm&amp;#8217;s &lt;span class="caps"&gt;CLI&lt;/span&gt; tool follows
the same help patterns for commands and&amp;nbsp;subcommands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm --help
$ helm get --help
$ helm get values --help
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-completion"&gt;
&lt;h2&gt;Shell&amp;nbsp;Completion&lt;/h2&gt;
&lt;p&gt;Again, just like &lt;tt class="docutils literal"&gt;kubectl&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;minikube&lt;/tt&gt; Helm provides shell
commands completion for &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt;. See more in&amp;nbsp;help:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm completion --help
&lt;/pre&gt;
&lt;p&gt;Completion helps a lot both everyday interaction with Helm and its &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;nbsp;exploration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commands-aliases"&gt;
&lt;h2&gt;Commands&amp;nbsp;Aliases&lt;/h2&gt;
&lt;p&gt;Some Helm commands have aliases. You can see then in the corresponding
section in help. As an example these two commands are the&amp;nbsp;same:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm list
$ helm ls
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="chart-values"&gt;
&lt;h2&gt;Chart&amp;nbsp;Values&lt;/h2&gt;
&lt;p&gt;Helm charts usually get initialized with some default values. It&amp;#8217;s
worth inspect them before&amp;nbsp;installation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm inspect values stable/postgresql
&lt;/pre&gt;
&lt;p&gt;Sometimes it&amp;#8217;s also very helpful to get values from the deployed
release, both explicitly set by user and taken from the&amp;nbsp;defaults:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm get values --all &amp;lt;your-release-name&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="chart-versions"&gt;
&lt;h2&gt;Chart&amp;nbsp;Versions&lt;/h2&gt;
&lt;p&gt;Every chart must have a &lt;a class="reference external" href="https://helm.sh/docs/charts/#charts-and-versioning"&gt;version number&lt;/a&gt;. Charts are versioned under
version control systems (&lt;span class="caps"&gt;VSC&lt;/span&gt;) and installed from the &lt;a class="reference external" href="https://helm.sh/docs/chart_repository/#the-chart-repository-guide"&gt;chart
repositories&lt;/a&gt;. You can list existing repos&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm repo list
&lt;/pre&gt;
&lt;p&gt;Don&amp;#8217;t forget to update packages information for your repos&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm repo update
&lt;/pre&gt;
&lt;p&gt;Sometimes you may want to install specific version of chart. List versions&amp;nbsp;first:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm search --versions stable/postgresql
&lt;/pre&gt;
&lt;p&gt;Now install the chart with a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--version&lt;/span&gt;&lt;/tt&gt; argument:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm intall --version 3.17.0 stable/postgresql
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="chart-deletion"&gt;
&lt;h2&gt;Chart&amp;nbsp;deletion&lt;/h2&gt;
&lt;p&gt;If you ommit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--name&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;your-release-name&amp;gt;&lt;/span&gt;&lt;/tt&gt; argument when doing &lt;tt class="docutils literal"&gt;helm
install&lt;/tt&gt; you get a random release name. Release names are reserved
even after your release is deleted, so that you can do a&amp;nbsp;rollback.&lt;/p&gt;
&lt;p&gt;If you are using a your own release name you can get into trouble when
reinstalling chart with the same name. In order to avoid name clash
delete your release like&amp;nbsp;so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm delete --purge &amp;lt;your-release-name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;In this case you won&amp;#8217;t be able to do a rollback&amp;nbsp;though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emulate-installation"&gt;
&lt;h2&gt;Emulate&amp;nbsp;Installation&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ve already covered &lt;tt class="docutils literal"&gt;inspect&lt;/tt&gt; a little bit. It allows you to see
chart&amp;#8217;s info, values and a &lt;span class="caps"&gt;README&lt;/span&gt; file. But sometimes you may want to
get dirty in chart&amp;#8217;s guts (actually, I always do as I don&amp;#8217;t really
like the idea of installing something I don&amp;#8217;t understand in my k8s
cluster). In this case you may want to emulate installation with
verbose&amp;nbsp;output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ helm install --dry-run --debug --version 3.17.0 stable/postgresql
&lt;/pre&gt;
&lt;p&gt;Having chart manifests at your fingertips is a great way to save time
and effort browsing for the source&amp;nbsp;code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Helm&amp;#8217;s got almost everything needed to start working with it in its
help. It&amp;#8217;s consistent and mimics other k8s &lt;span class="caps"&gt;CLI&lt;/span&gt; tools like &lt;tt class="docutils literal"&gt;kubectl&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;minikube&lt;/tt&gt;. Take your time to explore the help! I didn&amp;#8217;t really
try to cover everything here. I just scratched the surface with less
known things that you actually could found out by exploring the&amp;nbsp;help.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m going to update this post as I find new features worth&amp;nbsp;sharing.&lt;/p&gt;
&lt;/div&gt;
</content><category term="k8s"></category><category term="helm"></category></entry><entry><title>Minikube Cheat Sheet: most helpful commands and features I wish I knew from theÂ start</title><link href="https://blog.pilosus.org/posts/2019/05/18/minikube-cheat-sheet/" rel="alternate"></link><published>2019-05-18T19:00:00+03:00</published><updated>2019-05-18T19:00:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-18:/posts/2019/05/18/minikube-cheat-sheet/</id><summary type="html">&lt;p class="first last"&gt;My personal top of Minikube&amp;#8217;s features that can save you&amp;nbsp;time&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Minikube is a tool for running Kubernetes cluster on your local
machine. Recently I&amp;#8217;ve posted about Minikube&amp;#8217;s &lt;a class="reference external" href="https://blog.pilosus.org/posts/2019/05/18/minikube-hight-cpu-usage-linux/"&gt;ugly parts&lt;/a&gt;. Now
it&amp;#8217;s time for the good&amp;nbsp;parts!&lt;/p&gt;
&lt;div class="section" id="disclaimer"&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;At the time of writing I used Minikube version&amp;nbsp;1.0.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ minikube version
minikube version: v1.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems that Minikube is still under active development. So some
things may break for your version. You may also want to check every
now and then that you are using the latest version&amp;nbsp;available:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube update-check
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="help"&gt;
&lt;h2&gt;Help&lt;/h2&gt;
&lt;p&gt;Minikube&amp;#8217;s online presence is strange. You can find some mentions in
&lt;a class="reference external" href="https://kubernetes.io/docs/home/"&gt;Kubernetes Documentation&lt;/a&gt;. You can find a bunch of markdown files
with &lt;a class="reference external" href="https://github.com/kubernetes/minikube/blob/master/docs/README.md"&gt;Advanced Topics&lt;/a&gt; in Minikube&amp;#8217;s GitHub repo. And that&amp;#8217;s it about
documentation. But Minikube&amp;#8217;s help is a great source of
knowledge. It&amp;#8217;s consistently written for every command and&amp;nbsp;subcommand:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube --help
$ minikube start --help
$ minikube addons configure --help
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="minikube-shell-completion"&gt;
&lt;h2&gt;Minikube Shell&amp;nbsp;Completion&lt;/h2&gt;
&lt;p&gt;Minikube has a great &lt;span class="caps"&gt;CLI&lt;/span&gt;. But you can&amp;#8217;t really enjoy a &lt;span class="caps"&gt;CLI&lt;/span&gt; without
&lt;a class="reference external" href="https://github.com/scop/bash-completion"&gt;shell commands completion&lt;/a&gt;. That&amp;#8217;s why Minikube supports commands
completion for &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt; shells. Again, everything you need
is in help&amp;nbsp;already:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube completion --help
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;By default you have got 2 &lt;span class="caps"&gt;CPU&lt;/span&gt;, 2048M &lt;span class="caps"&gt;RAM&lt;/span&gt;, 20G disk allocated for your
k8s cluster. It&amp;#8217;s okay for the most cases. Still you may need to tweak
it depending on what are you doing. Use &lt;tt class="docutils literal"&gt;start&lt;/tt&gt; arguments to get
what you&amp;nbsp;want:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube start --cpus 4 --memory 4096 --vm-driver kvm2
&lt;/pre&gt;
&lt;p&gt;By now you&amp;#8217;ve already got used to using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--help&lt;/span&gt;&lt;/tt&gt;, haven&amp;#8217;t&amp;nbsp;you?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;If you experiment with your local k8s cluster a lot, deleting it and
starting all over with new settings, you may want to make some
settings permanent. They are saved under
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.minikube/config/config.json&lt;/span&gt;&lt;/tt&gt;. You can edit it manually, but &lt;span class="caps"&gt;CLI&lt;/span&gt;
provides a better&amp;nbsp;alternative:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# get list of settings
$ minikube config view

# set cpus; changes will take effect upon cluster delete and start
$ minikube config set cpus 4
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;p&gt;Your Kubernetes &lt;tt class="docutils literal"&gt;Service&lt;/tt&gt; that&amp;#8217;s provisioned to be available outside
of the cluster&amp;#8217;s network can be opened in your default browser from
the command&amp;nbsp;line:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube service &amp;lt;your-service-name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;To see the full list of services&amp;nbsp;do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube service list
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="monitoring"&gt;
&lt;h2&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;Minikube&amp;#8217;s shipped with a bunch of great addons. You can list them,
configure, enable, disable and open&amp;nbsp;up:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube addons list
$ minikube addons --help
&lt;/pre&gt;
&lt;p&gt;The most helpful addons I use daily to look up cluster&amp;#8217;s status are
&lt;tt class="docutils literal"&gt;dashboard&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;heapster&lt;/tt&gt;. Dashboard is a web &lt;span class="caps"&gt;UI&lt;/span&gt; enabled by
default. It&amp;#8217;s a great tool for monitoring both your pods
(&lt;tt class="docutils literal"&gt;Workloads&lt;/tt&gt; section) and the whole cluster (&lt;tt class="docutils literal"&gt;Cluster&lt;/tt&gt;
section). Fire up you dashboard&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube dashboard
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Heapster&lt;/tt&gt; is Grafana-based monitoring tool. Enable and open it&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ minikube addons enable heapster
$ minikube addons open heapster
&lt;/pre&gt;
&lt;p&gt;Sign in with &lt;tt class="docutils literal"&gt;admin/admin&lt;/tt&gt; credentials and go over &lt;tt class="docutils literal"&gt;Pods&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;Cluster&lt;/tt&gt; dashboards for super cool statistics&amp;nbsp;charts!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;When working with &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;Persistent Volumes&lt;/a&gt; you may need to do some ops on
your cluster&amp;#8217;s file system. Use secure shell to do&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# log in `remotely`
$ minikube ssh

# set `docker` user password
&amp;gt; sudo passwd docker
&amp;gt; exit
&lt;/pre&gt;
&lt;p&gt;Now that you have logged in &amp;#8220;remotely&amp;#8221; you can create directories to
mount your Persistent Volume, copy files,&amp;nbsp;etc.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# copy directory recursively from minikube cluster to the host machine
$ scp -i $(minikube ssh-key) -r docker&amp;#64;$(minikube ip):/mnt/data/ .
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="afterword"&gt;
&lt;h2&gt;Afterword&lt;/h2&gt;
&lt;p&gt;As with every complex piece of software in active development
Minikube&amp;#8217;s experience may be &lt;a class="reference external" href="https://blog.pilosus.org/posts/2019/05/18/minikube-hight-cpu-usage-linux/"&gt;frustrating&lt;/a&gt;. Still
Minikube is a great tool with a bunch of cool features. I wish I&amp;#8217;d
read an overview like this one when I first launched Minikube. Hope it
will help&amp;nbsp;someone.&lt;/p&gt;
&lt;/div&gt;
</content><category term="k8s"></category><category term="minikube"></category></entry><entry><title>Minikube high CPU usage even with no workload on LinuxÂ machine</title><link href="https://blog.pilosus.org/posts/2019/05/18/minikube-hight-cpu-usage-linux/" rel="alternate"></link><published>2019-05-18T11:00:00+03:00</published><updated>2019-05-18T11:00:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-18:/posts/2019/05/18/minikube-hight-cpu-usage-linux/</id><summary type="html">&lt;p&gt;Minikube is a tool that allows you to run Kubernetes for local
development. It&amp;#8217;s adviced to run all over the &lt;a class="reference external" href="https://kubernetes.io/docs/setup/minikube/"&gt;k8s documentation&lt;/a&gt;, in
the tech blogs. Still Minikube looks like a piece of software that is
not quite ready for a smooth development experience. At the time of
writing â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Minikube is a tool that allows you to run Kubernetes for local
development. It&amp;#8217;s adviced to run all over the &lt;a class="reference external" href="https://kubernetes.io/docs/setup/minikube/"&gt;k8s documentation&lt;/a&gt;, in
the tech blogs. Still Minikube looks like a piece of software that is
not quite ready for a smooth development experience. At the time of
writing minikube&amp;#8217;s got a bunch of &lt;a class="reference external" href="https://github.com/kubernetes/minikube/issues"&gt;issues&lt;/a&gt;. Some of them are open for
a long time, hardly reproducible and quite frustrating. &lt;span class="caps"&gt;CPU&lt;/span&gt; usage with
no workload to services is one of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve bumped into a problem when an idle minikube process
consumes up to 100% of &lt;span class="caps"&gt;CPU&lt;/span&gt;. After a while &lt;tt class="docutils literal"&gt;apiserver&lt;/tt&gt; stops
responding making your cluster not really functioning. It turned out
I&amp;#8217;m &lt;a class="reference external" href="https://github.com/kubernetes/minikube/issues/3207"&gt;not alone&lt;/a&gt;. I run minikube on my Lenovo Thinkpad X1 Carbon
machine with 16G &lt;span class="caps"&gt;RAM&lt;/span&gt; and 8 cores (i7 8th gen) on board. I use Ubuntu
18.04 with &lt;tt class="docutils literal"&gt;kvm2&lt;/tt&gt; &lt;span class="caps"&gt;VM&lt;/span&gt; driver. So I found this high &lt;span class="caps"&gt;CPU&lt;/span&gt; consumption as
quite unexpected and annoying. I&amp;#8217;ve solved this problem. But as it
sometimes happens in the software development, I&amp;#8217;m still not sure what
exactly helped. So taking into account some black magic, let&amp;#8217;s see
what witch brew&amp;#8217;s ingredients &lt;em&gt;may&lt;/em&gt;&amp;nbsp;help.&lt;/p&gt;
&lt;div class="section" id="before-you-begin-monitoring"&gt;
&lt;h2&gt;Before you begin:&amp;nbsp;monitoring&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;If you can&amp;#8217;t measure it, you can&amp;#8217;t improve it&amp;#8221;. Before making any
tweaks start measuring &lt;span class="caps"&gt;CPU&lt;/span&gt; usage. Altough &lt;tt class="docutils literal"&gt;top&lt;/tt&gt; tool is cool, it
just cannot beat its successor &lt;tt class="docutils literal"&gt;htop&lt;/tt&gt;. It allows you to tag
processes, filter and sort quickly, see processes and threads in a
flat and a tree&amp;nbsp;modes.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://blog.pilosus.org/images/htop-minikube.png"&gt;&lt;img alt="htop tool" class="responsive" src="https://blog.pilosus.org/images/htop-minikube.png" /&gt;&lt;/a&gt;
&lt;p&gt;On &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux you most likely want to track &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/QEMU"&gt;&lt;span class="caps"&gt;QEMU&lt;/span&gt; processes&lt;/a&gt; resource&amp;nbsp;usage.&lt;/p&gt;
&lt;p&gt;Minikube&amp;#8217;s &lt;tt class="docutils literal"&gt;dashboard&lt;/tt&gt; plugin is also a great tool for monitoing
resources &amp;#8212; per pod (Overview section) or for the whole cluster
(Cluster section). To use dashboard, enable the addon and open&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minikube addons enable dashboard
minikube dashboard
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="use-recommended-virtual-machine-drivers"&gt;
&lt;h2&gt;Use recommended Virtual Machine&amp;nbsp;drivers&lt;/h2&gt;
&lt;p&gt;Since I&amp;#8217;m on Ubuntu &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux I went for a &lt;tt class="docutils literal"&gt;kvm2&lt;/tt&gt; driver. Get the
recommended &lt;a class="reference external" href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md"&gt;&lt;span class="caps"&gt;VM&lt;/span&gt; driver&lt;/a&gt; for your specific&amp;nbsp;platform.&lt;/p&gt;
&lt;p&gt;Follow excellent Arch Linux Wiki &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/KVM"&gt;&lt;span class="caps"&gt;KVM&lt;/span&gt; article&lt;/a&gt; to make sure you have
&lt;strong&gt;hardware and Linux kernel support for &lt;span class="caps"&gt;KVM&lt;/span&gt;&lt;/strong&gt;. You may enable
virtualisation support in your &lt;span class="caps"&gt;BIOS&lt;/span&gt; and/or load &lt;span class="caps"&gt;KVM&lt;/span&gt; kernel modules&amp;nbsp;needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-latest-os-virtualisation-libraries-qemu-tools-vm-drivers"&gt;
&lt;h2&gt;Use latest &lt;span class="caps"&gt;OS&lt;/span&gt; virtualisation libraries, &lt;span class="caps"&gt;QEMU&lt;/span&gt; tools, &lt;span class="caps"&gt;VM&lt;/span&gt;&amp;nbsp;drivers&lt;/h2&gt;
&lt;p&gt;This is what I believe really fixed my problem. Make sure&amp;nbsp;you:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Update your &lt;span class="caps"&gt;OS&lt;/span&gt; package&amp;nbsp;information:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# in my case of Ubuntu 18.04 I use
sudo apt update
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;strong&gt;latest&lt;/strong&gt; libs and tools (like &lt;tt class="docutils literal"&gt;libvirt&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;qemu&lt;/tt&gt;),
enable &lt;tt class="docutils literal"&gt;systemD&lt;/tt&gt; services needed as per &lt;a class="reference external" href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm2-driver"&gt;&lt;span class="caps"&gt;KVM&lt;/span&gt; drivers&amp;nbsp;guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;strong&gt;latest&lt;/strong&gt;&amp;nbsp;driver&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="run-minikube-with-correct-vm-drivers-and-resources"&gt;
&lt;h2&gt;Run Minikube with correct &lt;span class="caps"&gt;VM&lt;/span&gt; drivers and&amp;nbsp;resources&lt;/h2&gt;
&lt;p&gt;If you had already run minikube with the default &lt;tt class="docutils literal"&gt;virtualbox&lt;/tt&gt;
drivers, remove your cluster&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# don't forget ``--p &amp;lt;your-profile-name&amp;gt;``
# if you had started minikube with custom profile name
minikube delete
&lt;/pre&gt;
&lt;p&gt;Make sure you start your new cluster with drivers needed and resources
allocation that meets your services requirements. In my case I used
more &lt;tt class="docutils literal"&gt;memory&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cpus&lt;/tt&gt; than it&amp;#8217;s set by&amp;nbsp;default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minikube start --vm-driver kvm2 --memory 4096 --cpus 4
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="use-only-the-addons-you-really-need"&gt;
&lt;h2&gt;Use only the addons you really&amp;nbsp;need&lt;/h2&gt;
&lt;p&gt;Minikube&amp;#8217;s shipped with a dozen of addons like &lt;tt class="docutils literal"&gt;dashboard&lt;/tt&gt; for web
&lt;span class="caps"&gt;UI&lt;/span&gt; or &lt;tt class="docutils literal"&gt;heapster&lt;/tt&gt; for Grafana-based monitoring. They may be cool and
useful, but don&amp;#8217;t try to enable them all at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;In my case enabling &lt;tt class="docutils literal"&gt;efk&lt;/tt&gt; addons has led to a high &lt;span class="caps"&gt;CPU&lt;/span&gt; usage, so
that I have to disable&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Make sure you enabled only the addons you really&amp;nbsp;need:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# get list of addons
minikube addons list

# check for addons in the global config too
# for the case of recreating your cluster
minikube config view
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Minikube&amp;#8217;s idea is cool. You can really save some money by running k8s
cluster on you laptop instead of setting it up in a cloud service for
testing. But all the abstractions that Kubernetes introduces,
virtualisation with &lt;span class="caps"&gt;KVM&lt;/span&gt; and &lt;span class="caps"&gt;QEMU&lt;/span&gt; on &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux make Minikube
complex. Minikube&amp;#8217;s niche (a developer&amp;#8217;s local machine) prevents it
from being quickly fixed as, say, cloud production-ready solutions
that earn their owners piles of money. So let&amp;#8217;s hope that magic I&amp;#8217;ve
posted here will work out for you too. I also hope the issue with high
&lt;span class="caps"&gt;CPU&lt;/span&gt; usage will be fixed by someone with proper&amp;nbsp;skills.&lt;/p&gt;
&lt;/div&gt;
</content><category term="k8s"></category><category term="minikube"></category></entry><entry><title>Ð Ð°Ð·Ð½Ð¸ÑÐ° Ð¼ÐµÐ¶Ð´Ñ Ð½Ð°Ð¼Ð¸ Ð¸ Ð·Ð°Ð¿Ð°Ð´Ð½ÑÐ¼Ð¸ ÐºÑÐ»ÑÑÑÑÐ°Ð¼Ð¸: Ð¾ÑÐºÐ°Ð· Ð¸ ÑÐ°Ð·ÑÐµÑÐµÐ½Ð¸Ðµ Ð¿Ð¾ÑÐµÐ½ÑÐ¸Ð°Ð»ÑÐ½Ð¾ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ½ÑÑÂ ÑÐ¸ÑÑÐ°ÑÐ¸Ð¹</title><link href="https://blog.pilosus.org/posts/2019/05/12/yes-means-yes-ru/" rel="alternate"></link><published>2019-05-12T11:00:00+03:00</published><updated>2019-05-12T11:00:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-12:/posts/2019/05/12/yes-means-yes-ru/</id><summary type="html">&lt;p&gt;ÐÑÐµ Ð²Ð¸Ð´ÐµÐ»Ð¸ ÑÑÑ ÑÐ¼ÐµÑÐ½ÑÑ ÐºÐ°ÑÑÐ¸Ð½ÐºÑ Ð¿ÑÐ¾ Ð¾ÑÐµÐ½ÐºÑ &amp;#8220;ÑÐ¾ÑÐ¾ÑÐ¾/Ð¿Ð»Ð¾ÑÐ¾&amp;#8221; Ð² Ð·Ð°Ð¿Ð°Ð´Ð½Ð¾Ð¹
ÐºÑÐ»ÑÑÑÑÐµ Ð¸ Ð²Ð¾ÑÑÐ¾ÑÐ½Ð¾ ÐµÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¾Ð¹. ÐÐ° ÑÐ°Ð¼Ð¾Ð¼ Ð´ÐµÐ»Ðµ ÑÐ¼ÐµÑÐ½Ð¾Ð³Ð¾ Ð² Ð½ÐµÐ¹ Ð¼Ð°Ð»Ð¾,
ÐºÐ¾Ð³Ð´Ð° ÑÑÐ°Ð»ÐºÐ¸Ð²Ð°ÐµÑÑÑÑ Ñ ÑÑÐ¾Ð¹ ÑÐ°Ð·Ð½Ð¸ÑÐµÐ¹ ÐºÑÐ»ÑÑÑÑ Ð² ÑÐµÐ°Ð»ÑÐ½Ð¾Ð¹ Ð¶Ð¸Ð·Ð½Ð¸. ÐÑÐ¾Ð±ÐµÐ½Ð½Ð¾
ÐµÑÐ»Ð¸ ÑÑÐ¾ ÑÐ²ÑÐ·Ð°Ð½Ð¾ Ñ ÑÐµÐ¼-ÑÐ¾ Ð²Ð°Ð¶Ð½ÑÐ¼: Ð·Ð´Ð¾ÑÐ¾Ð²ÑÐµÐ¼, Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸ÑÐ¼Ð¸, ÐºÐ°ÑÑÐµÑÐ¾Ð¹. Ð£
Ð²Ð°Ñ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ ÑÑÐ´ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°Ð½Ð¸Ðµ ÑÐ·ÑÐºÐ°. ÐÑ Ð´Ð°Ð¶Ðµ â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;ÐÑÐµ Ð²Ð¸Ð´ÐµÐ»Ð¸ ÑÑÑ ÑÐ¼ÐµÑÐ½ÑÑ ÐºÐ°ÑÑÐ¸Ð½ÐºÑ Ð¿ÑÐ¾ Ð¾ÑÐµÐ½ÐºÑ &amp;#8220;ÑÐ¾ÑÐ¾ÑÐ¾/Ð¿Ð»Ð¾ÑÐ¾&amp;#8221; Ð² Ð·Ð°Ð¿Ð°Ð´Ð½Ð¾Ð¹
ÐºÑÐ»ÑÑÑÑÐµ Ð¸ Ð²Ð¾ÑÑÐ¾ÑÐ½Ð¾ ÐµÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¾Ð¹. ÐÐ° ÑÐ°Ð¼Ð¾Ð¼ Ð´ÐµÐ»Ðµ ÑÐ¼ÐµÑÐ½Ð¾Ð³Ð¾ Ð² Ð½ÐµÐ¹ Ð¼Ð°Ð»Ð¾,
ÐºÐ¾Ð³Ð´Ð° ÑÑÐ°Ð»ÐºÐ¸Ð²Ð°ÐµÑÑÑÑ Ñ ÑÑÐ¾Ð¹ ÑÐ°Ð·Ð½Ð¸ÑÐµÐ¹ ÐºÑÐ»ÑÑÑÑ Ð² ÑÐµÐ°Ð»ÑÐ½Ð¾Ð¹ Ð¶Ð¸Ð·Ð½Ð¸. ÐÑÐ¾Ð±ÐµÐ½Ð½Ð¾
ÐµÑÐ»Ð¸ ÑÑÐ¾ ÑÐ²ÑÐ·Ð°Ð½Ð¾ Ñ ÑÐµÐ¼-ÑÐ¾ Ð²Ð°Ð¶Ð½ÑÐ¼: Ð·Ð´Ð¾ÑÐ¾Ð²ÑÐµÐ¼, Ð¾ÑÐ½Ð¾ÑÐµÐ½Ð¸ÑÐ¼Ð¸, ÐºÐ°ÑÑÐµÑÐ¾Ð¹. Ð£
Ð²Ð°Ñ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ ÑÑÐ´ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°Ð½Ð¸Ðµ ÑÐ·ÑÐºÐ°. ÐÑ Ð´Ð°Ð¶Ðµ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿ÑÐ°ÐºÑÐ¸ÑÐµÑÐºÐ¸
Ð¸Ð·Ð±Ð°Ð²Ð¸ÑÑÑÑ Ð¾Ñ Ð°ÐºÑÐµÐ½ÑÐ°. ÐÐ¾ ÑÐ¼ÐµÐ½Ð¸Ðµ Ð°Ð´Ð°Ð¿ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ ÑÑÐ¶Ð´ÐµÐ½Ð¸Ñ Ð¸ Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾
Ð¸Ð½ÑÐµÑÐ¿ÑÐµÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾ÑÑÐ» Ð²Ð°Ð¶Ð½Ñ Ð´Ð°Ð¶Ðµ Ð±Ð¾Ð»ÑÑÐµ. ÐÐµ Ð½ÑÐ¶Ð½Ð¾ Ð´ÑÐ¼Ð°ÑÑ, ÑÑÐ¾ ÑÐ°Ð·Ð½Ð¸ÑÐ°
ÐºÑÐ»ÑÑÑÑ ÐºÐ°ÑÐ°ÐµÑÑÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð½ÑÑ ÑÑÐµÑ Ð¶Ð¸Ð·Ð½Ð¸ Ð¸ ÑÐ¶ ÑÐ¾ÑÐ½Ð¾ Ð½Ð¸ÐºÐ°Ðº Ð½Ðµ
Ð·Ð°Ð´ÐµÐ½ÐµÑ Ð½Ð°ÐµÐ¼Ð½Ð¾Ð³Ð¾ ÑÐ¾ÑÑÑÐ´Ð½Ð¸ÐºÐ° Ð² Ð¼ÐµÐ¶Ð´ÑÐ½Ð°ÑÐ¾Ð´Ð½Ð¾Ð¹ Ð·Ð°Ð¿Ð°Ð´Ð½Ð¾Ð¹ ÐºÐ¾Ð¼Ð¿Ð°Ð½Ð¸Ð¸. Ð ÑÑÐ¾Ð¼
Ð¿Ð¾ÑÑÐµ Ñ ÑÐ°Ð·Ð±ÐµÑÑ Ð½ÐµÐ·Ð½Ð°ÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹, Ð½Ð¾ Ð¾ÑÐµÐ½Ñ ÑÐ°ÑÐ°ÐºÑÐµÑÐ½ÑÐ¹ Ð¿ÑÐ¸Ð¼ÐµÑ Ð¸Ð·
ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐ¸ open source Ð¿ÑÐ¾ÐµÐºÑÐ°. &amp;#8220;ÐÐ°Ð¿Ð°Ð´Ð½ÑÐ¹&amp;#8221; Ð¿Ð¾Ð½ÑÑÐ¸Ðµ Ð¾ÑÐµÐ½Ñ ÑÐ¸ÑÐ¾ÐºÐ¾Ðµ, Ð¸
ÑÐ°ÑÑÐ¾ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾. ÐÐ· ÑÐ²Ð¾ÐµÐ³Ð¾ Ð¾Ð¿ÑÑÐ° Ð¼Ð¾Ð³Ñ ÑÐºÐ°Ð·Ð°ÑÑ, ÑÑÐ¾
Ð»ÐµÐ³ÐºÐ¾ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»Ñ Ð°Ð½Ð°Ð»Ð¾Ð³Ð¸ÑÐ½ÑÐ¹ ÑÐ»ÑÑÐ°Ð¹ Ñ Ð°Ð²ÑÑÑÐ¸Ð¹ÑÐµÐ¼, Ð±ÑÐ¸ÑÐ°Ð½ÑÐµÐ¼ Ð¸Ð»Ð¸
Ð°Ð¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐµÐ¼, Ð½Ð¾ ÑÑÑÐ´Ð½ÐµÐµ Ñ Ð½ÐµÐ¼ÑÐµÐ¼ Ð¸Ð»Ð¸&amp;nbsp;Ð¸ÑÐ¿Ð°Ð½ÑÐµÐ¼.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;ÐÑÐ¸Ð¼ÐµÑ&lt;/h2&gt;
&lt;img alt="Ð¥Ð¾ÑÐ¾ÑÐ¾ Ð¸ Ð¿Ð»Ð¾ÑÐ¾ Ð² ÑÐ°Ð·Ð½ÑÑ ÐºÑÐ»ÑÑÑÑÐ°Ñ" class="responsive align-left" src="https://blog.pilosus.org/images/yes-means-yes.jpg" style="width: 400px;" /&gt;
&lt;p&gt;Ð¯ ÑÑÐ°ÑÑÐ²Ð¾Ð²Ð°Ð» Ð² ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÐµ open source Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÐ¸ Ð²Ð°Ð»Ð¸Ð´Ð°ÑÐ¸Ð¸ Ð´Ð°Ð½Ð½ÑÑ
&lt;a class="reference external" href="https://github.com/samuelcolvin/pydantic"&gt;pydantic&lt;/a&gt;. ÐÐ¾ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð½Ð¾Ð³Ð¾
ÑÐ»ÑÑÐ°Ñ Ð² Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÑ Ð±ÑÐ»Ð¾ Ð²Ð¼ÐµÑÐ´Ð¶ÐµÐ½Ð¾ 12 Ð¼Ð¾Ð¸Ñ Ð¿ÑÐ°Ð²Ð¾Ðº &amp;#8212; Ð½Ð¾Ð²ÑÐµ ÑÐ¸ÑÐ¸,
Ð¿Ð¾ÑÐ¸ÐºÑÐµÐ½Ð½ÑÐµ Ð±Ð°Ð³Ð¸, ÑÐµÑÑÑ, Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ, Ð´Ð°Ð¶Ðµ Ð¾ÑÐ¾ÑÐ¼Ð»ÐµÐ½Ð¸Ðµ &amp;#8220;Ð»Ð¸ÑÐ°&amp;#8221;
ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ñ, &lt;span class="caps"&gt;README&lt;/span&gt;-ÑÐ°Ð¹Ð»Ð°. ÐÐ¿Ð¾Ð»Ð½Ðµ Ð¼Ð¾Ð¶Ð½Ð¾ Ð³Ð¾Ð²Ð¾ÑÐ¸ÑÑ Ð¾ &amp;#8220;ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾Ð¼&amp;#8221;
ÑÑÐ°ÑÑÐ½Ð¸ÐºÐµ ÑÐ¾Ð²Ð¼ÐµÑÑÐ½Ð¾Ð³Ð¾&amp;nbsp;Ð¿ÑÐ¾ÐµÐºÑÐ°.&lt;/p&gt;
&lt;p&gt;ÐÐ¾ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ Pull Request Ð±Ð¾Ð»ÑÑÐ¾Ð¹ Ð½Ð¾Ð²Ð¾Ð¹ ÑÐ¸ÑÐ¸ Ð·Ð°ÐºÐ¾Ð½ÑÐ¸Ð»ÑÑ &lt;a class="reference external" href="https://github.com/samuelcolvin/pydantic/pull/509"&gt;ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¼&lt;/a&gt;. ÐÐ¾ÑÐ»Ðµ
Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð³Ð¾ Ð¾Ð±ÑÑÐ¶Ð´ÐµÐ½Ð¸Ñ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»Ð° Ñ ÑÐ¾Ð·Ð´Ð°Ð» &lt;span class="caps"&gt;PR&lt;/span&gt;, ÐºÐ¾ÑÐ¾ÑÑÐ¹ Ð¿Ð¾Ð»ÑÑÐ°ÐµÑ
Ð±Ð¾Ð»ÑÑÐ¾Ðµ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð·Ð°Ð¼ÐµÑÐ°Ð½Ð¸Ð¹ Ð½Ð° code review. ÐÑÐµ ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð²Ð½Ð¾ Ð¸ Ð¿Ð¾
Ð´ÐµÐ»Ñ. ÐÐ°Ð»ÐµÐµ ÑÐ»ÐµÐ´ÑÐµÑ Ð¿ÑÐ¸Ð¼ÐµÑÐ½Ð¾ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹&amp;nbsp;Ð´Ð¸Ð°Ð»Ð¾Ð³:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repo owner&lt;/strong&gt;: If you&amp;#8217;re happy to work on all these that&amp;#8217;s great, but if
not I&amp;#8217;m very happy to do some work on this &lt;span class="caps"&gt;PR&lt;/span&gt;&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I&amp;#8217;d be happy to work on all these thigs you&amp;#8217;ve found if you don&amp;#8217;t&amp;nbsp;mind!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repo owner&lt;/strong&gt;: great, that&amp;#8217;s what I hoped, just didn&amp;#8217;t want to ask too much of&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;Ð¯ Ð´ÐµÐ»Ð°Ñ Ð¿ÑÐ°Ð²ÐºÐ¸ Ð¿Ð¾ Ð·Ð°Ð¼ÐµÑÐ°Ð½Ð¸ÑÐ¼ Ñ code review. Ð ÑÐ°Ð±Ð¾ÑÐµ Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ°ÐµÑÑÑ ÐµÑÐµ
Ð¾Ð´Ð¸Ð½ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº, Ð½Ð°ÑÐµÐ´ÑÐ¸Ð¹ Ð¿Ð°ÑÑ Ð¼Ð¾Ð¸Ñ Ð¾Ð¿ÐµÑÐ°ÑÐ¾Ðº. ÐÐ¾Ð´ Ð³Ð¾ÑÐ¾Ð² ÐºÐ¾ Ð²ÑÐ¾ÑÐ¾Ð¹
Ð¸ÑÐµÑÐ°ÑÐ¸Ð¸ ÑÐµÐ²ÑÑ. ÐÐ¾ Ð²Ð¼ÐµÑÑÐ¾ Ð½ÐµÐ³Ð¾ Ð°Ð²ÑÐ¾Ñ Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÐ¸ Ð¿Ð¸ÑÐµÑ, ÑÑÐ¾ ÑÐµÑÐ¸Ð» Ð²ÑÐµ
Ð¿ÐµÑÐµÐ´ÐµÐ»Ð°ÑÑ, Ð·Ð°ÐºÑÑÐ²Ð°ÐµÑ Issue Ñ Ð¼Ð¾Ð¸Ð¼ &lt;span class="caps"&gt;PR&lt;/span&gt; Ð¸ Ð¾ÑÐºÑÑÐ²Ð°ÐµÑ ÑÐ¾Ð±ÑÑÐ²ÐµÐ½Ð½ÑÐ¹ &lt;span class="caps"&gt;PR&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;ÐÐ¾Ð²ÑÐ¹ ÐºÐ¾Ð´ ÑÐ¾ÑÑ Ð¸ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑ Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÐµ Ð¼Ð¾Ð¸ ÐºÐ¾Ð¼Ð¼Ð¸ÑÑ, Ð½Ð¾ Ð² ÑÐµÐ»Ð¾Ð¼
Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾ Ð¿ÐµÑÐµÐ¿Ð¸ÑÐ°Ð½. ÐÑÐ±Ð¾Ð¿ÑÑÐ½Ð¾, ÑÑÐ¾ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ñ Ð´Ð°Ð¶Ðµ ÑÐ½Ð¸Ñ-ÑÐµÑÑÑ Ð´Ð»Ñ
ÑÐµÑ Ð¿ÑÐ±Ð»Ð¸ÑÐ½ÑÑ Ð¼ÐµÑÐ¾Ð´Ð¾Ð², Ð¿Ð¾Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ Ð¸ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ ÐºÐ¾ÑÐ¾ÑÑÑ Ð½Ðµ Ð¸Ð·Ð¼ÐµÐ½Ð¸Ð»Ð¸ÑÑ. Ð
Ð½Ð¸Ñ Ð±ÑÐºÐ²Ð°Ð»ÑÐ½Ð¾ ÑÐ²ÐµÑÐ° &lt;tt class="docutils literal"&gt;aqua&lt;/tt&gt; Ð¸Ð»Ð¸ &lt;tt class="docutils literal"&gt;black&lt;/tt&gt; Ð·Ð°Ð¼ÐµÐ½ÐµÐ½Ñ Ð½Ð° &lt;tt class="docutils literal"&gt;purple&lt;/tt&gt; Ð¸Ð»Ð¸
&lt;tt class="docutils literal"&gt;blue&lt;/tt&gt;. ÐÑÐµ Ð±Ð¾Ð»ÐµÐµ Ð»ÑÐ±Ð¾Ð¿ÑÑÐ½Ð¾, ÑÑÐ¾ &lt;strong&gt;Ð² Ð½Ð¾Ð²Ð¾Ð¼ ÐºÐ¾Ð´Ðµ ÐµÑÑÑ Ð±Ð¾Ð»ÑÑÐ¸Ðµ
Ð¾ÑÐºÐ»Ð¾Ð½ÐµÐ½Ð¸Ñ Ð¾Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾ Ð°Ð²ÑÐ¾Ñ Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÐ¸ Ð¿ÑÐµÐ´Ð»Ð°Ð³Ð°Ð» Ð¿Ð¾Ð¿ÑÐ°Ð²Ð¸ÑÑ Ð½Ð° code
review&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;ÐÐµÐ»ÑÐ·Ñ ÑÐºÐ°Ð·Ð°ÑÑ, ÑÑÐ¾ Ð½Ð¾Ð²ÑÐ¹ ÐºÐ¾Ð´ Ð»ÐµÐ³ÑÐµ ÑÐ¸ÑÐ°ÐµÑÑÑ Ð¸
Ð¿Ð¾Ð½Ð¸Ð¼Ð°ÐµÑÑÑ. ÐÐ½ ÐµÐ´Ð²Ð° Ð»Ð¸ Ð¾Ð¿ÑÐ¸Ð¼Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½ Ð½Ð° Ð±ÑÑÑÑÐ¾Ð´ÐµÐ¹ÑÑÐ²Ð¸Ðµ, Ð¿Ð¾ÑÐ¾Ð¼Ñ ÑÑÐ¾
Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑ Ð±Ð¾Ð»ÐµÐµ ÑÐ»Ð¾Ð¶Ð½ÑÐµ ÑÐµÐ³ÑÐ»ÑÑÐ½ÑÐµ Ð²ÑÑÐ°Ð¶ÐµÐ½Ð¸Ñ ÑÐ°Ð¼, Ð³Ð´Ðµ ÑÐ°Ð½ÑÑÐµ Ð±ÑÐ»Ð°
Ð¿ÑÐ¾Ð²ÐµÑÐºÐ° Ð½Ð° Ð½Ð°ÑÐ°Ð»Ð¾ ÑÑÑÐ¾ÐºÐ¸ Ñ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð½Ð¾Ð³Ð¾&amp;nbsp;ÑÐ¸Ð¼Ð²Ð¾Ð»Ð°.&lt;/p&gt;
&lt;p&gt;ÐÐ¾ Ð¼Ð¾ÑÐ¸Ð²Ñ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ð¹ ÑÐ°Ð·Ð±Ð¸ÑÐ°ÑÑ ÑÐ¾Ð²ÑÐµÐ¼ Ð½Ðµ Ð¸Ð½ÑÐµÑÐµÑÐ½Ð¾. Ð¡Ð°Ð¼Ð¾Ðµ Ð²Ð°Ð¶Ð½Ð¾Ðµ Ð² ÑÑÐ¾Ð¹
Ð¸ÑÑÐ¾ÑÐ¸Ð¸ &amp;#8212; &lt;em&gt;Ð¼Ð°Ð½ÐµÑÐ° ÐºÐ¾Ð¼Ð¼ÑÐ½Ð¸ÐºÐ°ÑÐ¸Ð¸&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;Ð§ÑÐ¾ Ð·Ð´ÐµÑÑ Ð½Ðµ&amp;nbsp;ÑÐ°Ðº?&lt;/h2&gt;
&lt;p&gt;ÐÑÐµÐ²Ð¸Ð´Ð½Ð¾, ÑÐ¶Ðµ Ð½Ð° Ð¿ÐµÑÐ²Ð¾Ð¹ Ð¸ÑÐµÑÐ°ÑÐ¸Ð¸ ÑÐµÐ²ÑÑ Ð°Ð²ÑÐ¾Ñ Ð±Ð¸Ð±Ð»Ð¸Ð¾ÑÐµÐºÐ¸ Ð¿Ð¾Ð½Ð¸Ð¼Ð°Ð», ÑÑÐ¾
ÐµÐ¼Ñ Ð½Ðµ Ð½ÑÐ°Ð²Ð¸ÑÑÑ ÑÐµÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»Ð° Ð¸ Ð¾Ð½ ÑÐ¾ÑÐµÐ» Ð±Ñ Ð²ÑÐµ
Ð¿ÐµÑÐµÐ´ÐµÐ»Ð°ÑÑ. ÐÐ¼ÐµÑÑÐ¾ ÑÐ¾Ð³Ð¾ ÑÑÐ¾Ð±Ñ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾Ð± ÑÑÐ¾Ð¼ &lt;em&gt;ÑÐ²Ð½Ð¾&lt;/em&gt;, Ð±ÑÐ»Ð°
Ð·Ð°Ð´ÐµÐ¹ÑÑÐ²Ð¾Ð²Ð°Ð½Ð° ÑÐ°ÑÐ°ÐºÑÐµÑÐ½Ð°Ñ Ð¾Ð±ÑÐµÐºÐ°ÐµÐ¼Ð°Ñ Ð´Ð¸Ð¿Ð»Ð¾Ð¼Ð°ÑÐ¸Ñ &amp;#8212; &amp;#8220;ÐµÑÐ»Ð¸ ÑÑ Ð±ÑÐ» Ð±Ñ ÑÐ°Ð´
Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ ÑÐ°Ð±Ð¾ÑÑ, ÑÑÐ¾ Ð¾ÑÐ»Ð¸ÑÐ½Ð¾, Ð½Ð¾ ÐµÑÐ»Ð¸ Ð½ÐµÑ, Ñ ÑÐ°Ð¼ Ð±ÑÐ» Ð±Ñ ÑÐ°Ð´
Ð¿Ð¾ÑÐ°Ð±Ð¾ÑÐ°ÑÑ Ð½Ð°Ð´ ÑÑÐ¸Ð¼ ÐºÐ¾Ð´Ð¾Ð¼&amp;#8221;. ÐÐ´ÐµÑÑ Ñ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð±ÑÐ» Ð¿Ð¾Ð½ÑÑÑ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½ÑÐ¹
Ð¿Ð¾ÑÑÐ» ÑÑÐ¾Ð¹ ÑÑÐ°Ð·Ñ Ð¸ Ð¿ÑÐµÐºÑÐ°ÑÐ¸ÑÑ ÑÑÐ°ÑÐ¸ÑÑ Ð²ÑÐµÐ¼Ñ Ð½Ð°Ð´ Ð¿Ð¾ÑÐ»ÐµÐ´ÑÑÑÐµÐ¹ ÑÐ°Ð±Ð¾ÑÐ¾Ð¹. Ð¯
Ð´Ð¾Ð³Ð°Ð´ÑÐ²Ð°Ð»ÑÑ, ÑÑÐ¾ ÑÐ°ÐºÐ¾Ðµ ÑÐ°Ð·Ð²Ð¸ÑÐ¸Ðµ ÑÐ¾Ð±ÑÑÐ¸Ð¹ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð¿Ð¾ÑÑÐ¾Ð¼Ñ Ð¾ÑÐ²ÐµÑÐ¸Ð» Ð²
Ð¼ÑÐ³ÐºÐ¾Ð¹ ÑÐ¾ÑÐ¼Ðµ, Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÑÑÐµÐ¹ ÑÐ¾Ð±ÐµÑÐµÐ´Ð½Ð¸ÐºÑ Ð´Ð°ÑÑ Ð¼Ð½Ðµ ÐµÑÐµ Ð¾Ð´Ð¸Ð½ Ð·Ð½Ð°Ðº Ð½ÐµÐ¶ÐµÐ»Ð°Ð½Ð¸Ñ
Ð¼Ð¾ÐµÐ³Ð¾ ÑÑÐ°ÑÑÐ¸Ñ Ð¸Ð»Ð¸ ÑÐ²Ð½Ð¾ Ð¾Ð± ÑÑÐ¾Ð¼ Ð·Ð°ÑÐ²Ð¸ÑÑ: &amp;#8220;Ñ Ð±ÑÐ» Ð±Ñ ÑÐ°Ð´ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð¸ÑÑ
ÑÐ°Ð±Ð¾ÑÑ, ÐµÑÐ»Ð¸ ÑÑ Ð½Ðµ Ð²Ð¾Ð·ÑÐ°Ð¶Ð°ÐµÑÑ!&amp;#8221;. ÐÐ¾Ð»ÑÑÐ¸Ð² &lt;strong&gt;Ð¿Ð¾Ð´ÑÐµÑÐºÐ½ÑÑÐ¾ Ð¾Ð´Ð¾Ð±ÑÐ¸ÑÐµÐ»ÑÐ½ÑÐ¹&lt;/strong&gt;
Ð¾ÑÐ²ÐµÑ &amp;#8220;ÐÑÐ»Ð¸ÑÐ½Ð¾! Ð­ÑÐ¾ Ð¸Ð¼ÐµÐ½Ð½Ð¾ ÑÐ¾, Ð½Ð° ÑÑÐ¾ Ñ Ð½Ð°Ð´ÐµÑÐ»ÑÑ&amp;#8221; Ñ Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð°Ñ ÑÐ°Ð±Ð¾ÑÑ
Ð½Ð°Ð´ ÑÐµÐ¼, ÑÐµÐ¼Ñ ÑÐ¶Ðµ Ð½Ð° ÑÐ¾Ñ Ð¼Ð¾Ð¼ÐµÐ½Ñ ÑÐ³Ð¾ÑÐ¾Ð²Ð°Ð½Ð¾ Ð±ÑÑÑ&amp;nbsp;Ð²ÑÐ±ÑÐ¾ÑÐµÐ½Ð½ÑÐ¼.&lt;/p&gt;
&lt;p&gt;Ð¯ ÑÑÐ²ÐµÑÐ¶Ð´Ð°Ñ, ÑÑÐ¾ ÑÑÐ¾ Ð¾ÑÐµÐ½Ñ ÑÐ¸Ð¿Ð¸ÑÐ½ÑÐ¹&amp;nbsp;Ð¿Ð°ÑÑÐµÑÐ½:&lt;/p&gt;
&lt;img alt="Monty Python's Argument Clinic Sketch, courtesy wikipedia.org" class="responsive align-left" src="https://blog.pilosus.org/images/argument-clinic.png" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ð¡Ð¾Ð±ÐµÑÐµÐ´Ð½Ð¸Ðº Ð´Ð°ÐµÑ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½ÑÐ¹ Ð¾ÑÐ²ÐµÑ Ñ Ð½ÐµÐ±Ð¾Ð»ÑÑÐ¸Ð¼ Ð·Ð°Ð¼ÐµÑÐ°Ð½Ð¸ÐµÐ¼ (&amp;#8220;Ð½Ðµ
ÑÐ¾ÑÐµÐ» Ð±Ñ ÑÐµÐ±Ñ ÑÑÑÑÐ¶Ð´Ð°ÑÑ&amp;#8221;, &amp;#8220;ÐµÑÐ»Ð¸ ÑÐµÐ±Ñ ÑÑÐ¾ Ð¾Ð±ÑÐµÐ¼ÐµÐ½Ð¸Ñ, Ð±ÑÐ´Ñ ÑÐ°Ð´
ÑÐ´ÐµÐ»Ð°ÑÑ ÑÑÐ¾ ÑÐ°Ð¼&amp;#8221; Ð¸&amp;nbsp;Ñ.Ð¿.)&lt;/li&gt;
&lt;li&gt;Ð¢Ñ ÑÐ¾Ð¾Ð±ÑÐ°ÐµÑÑ, ÑÑÐ¾ Ð²ÑÐµ Ð² Ð¿Ð¾ÑÑÐ´ÐºÐµ Ð¸ ÑÑ Ð³Ð¾ÑÐ¾Ð²&amp;nbsp;Ð¿ÑÐ¾Ð´Ð¾Ð»Ð¶Ð°ÑÑ&lt;/li&gt;
&lt;li&gt;Ð¡Ð¾Ð±ÐµÑÐµÐ´Ð½Ð¸Ðº &lt;strong&gt;ÑÑÐµÐ·Ð¼ÐµÑÐ½Ð¾ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½Ð¾&lt;/strong&gt; Ð½Ð° ÑÑÐ¾ ÑÐµÐ°Ð³Ð¸ÑÑÐµÑ
(&amp;#8220;Ð¿Ð¾ÑÑÑÑÐ°ÑÑÐµ, Ñ Ð½Ð° Ð¸Ð¼ÐµÐ½Ð½Ð¾ Ð½Ð° ÑÑÐ¾ Ð¸ Ð½Ð°Ð´ÐµÑÐ»ÑÑ!&amp;#8221;, &amp;#8220;ÑÑ ÑÐ´ÐµÐ»Ð°ÐµÑÑ ÑÑÐ¾
Ð»ÑÑÑÐµ ÑÐµÐ¼ ÐºÑÐ¾-Ð»Ð¸Ð±Ð¾&amp;nbsp;Ð´ÑÑÐ³Ð¾Ð¹&amp;#8221;)&lt;/li&gt;
&lt;li&gt;ÐÑ ÑÐµÐ±Ñ Ð¸Ð·Ð±Ð°Ð²Ð»ÑÑÑÑÑ Ð² Ð¿Ð¾Ð´ÑÐµÑÐºÐ½ÑÑÐ¾ Ð½ÐµÐ¹ÑÑÐ°Ð»ÑÐ½Ð¾Ð¹ ÑÐ¾ÑÐ¼Ðµ (&amp;#8220;Ñ ÑÐµÐ½Ñ Ð²Ð°ÑÐµ
ÑÑÐ°ÑÑÐ¸Ðµ, ÑÐ¿Ð°ÑÐ¸Ð±Ð¾,&amp;nbsp;Ð¿Ð¾ÐºÐ°&amp;#8221;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ÐÐ»Ñ ÑÐµÐ»Ð¾Ð²ÐµÐºÐ° Ð²Ð¾ÑÑÐ¾ÑÐ½Ð¾ ÐµÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¾Ð¹ ÐºÑÐ»ÑÑÑÑÑ ÑÑÐ¾, Ð½ÐµÑÐ¾Ð¼Ð½ÐµÐ½Ð½Ð¾,
ÑÐ¸Ð·Ð¾ÑÑÐµÐ½Ð¸Ñ. Ð£Ð²Ñ, Ð¾Ð½Ð° Ð½Ð°ÑÑÐ¾Ð»ÑÐºÐ¾ ÑÐ°ÑÐ¿ÑÐ¾ÑÑÑÐ°Ð½ÐµÐ½Ð° Ñ Ð·Ð°Ð¿Ð°Ð´Ð½ÑÑ ÑÐ¾ÑÐµÐ´ÐµÐ¹, ÑÑÐ¾
ÑÐºÐ¾ÑÐµÐµ Ð³Ð¾Ð²Ð¾ÑÐ¸Ñ Ð¾ Ð²Ð°ÑÐ¸Ð°Ð½ÑÐµ&amp;nbsp;Ð½Ð¾ÑÐ¼Ñ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;ÐÐ¾ÑÐµÐ¼Ñ ÑÐ°Ðº&amp;nbsp;Ð¿ÑÐ¾Ð¸ÑÑÐ¾Ð´Ð¸Ñ?&lt;/h2&gt;
&lt;p&gt;Ð¯ Ð½Ðµ Ð¿ÑÐ¸ÑÐ¾Ð»Ð¾Ð³, Ð½Ðµ ÐºÑÐ»ÑÑÑÑÐ¾Ð»Ð¾Ð³, Ð¸ ÑÐ¾ÑÐ½Ð¾Ð³Ð¾ Ð¾ÑÐ²ÐµÑÐ° Ð½Ð° ÑÑÐ¾Ñ Ð²Ð¾Ð¿ÑÐ¾Ñ Ñ Ð¼ÐµÐ½Ñ
Ð½ÐµÑ. ÐÑÑÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð´Ð¾Ð³Ð°Ð´ÐºÐ¸. ÐÑÐ¼Ð°Ñ, ÑÑÐ¾ Ð³Ð»Ð°Ð²Ð½Ð°Ñ Ð¿ÑÐ¸ÑÐ¸Ð½Ð° &amp;#8212; Ð¶ÐµÐ»Ð°Ð½Ð¸Ðµ
&lt;strong&gt;Ð¸Ð·Ð±ÐµÐ³Ð°ÑÑ Ð¿ÑÑÐ¼ÑÐµ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÑ&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;ÐÑÑÐ¼Ð¾Ð¹ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑ Ð¸Ð·Ð±ÐµÐ³Ð°ÐµÑÑÑ Ð¸Ð»Ð¸ ÑÐ¾ÑÑ Ð±Ñ Ð¾Ð¿Ð¾ÑÑÐµÐ´ÑÐµÑÑÑ. ÐÐ¼ÐµÑÑÐ¾ ÑÐ¾Ð³Ð¾ ÑÑÐ¾Ð±Ñ
ÑÐ´ÐµÐ»Ð°ÑÑ Ð»Ð¸ÑÐ½Ð¾Ðµ Ð·Ð°Ð¼ÐµÑÐ°Ð½Ð¸Ðµ Ð¼ÐµÑÐ°ÑÑÐµÐ¼Ñ Ð¿Ð°ÑÑÐ°Ð¶Ð¸ÑÑ Ð¿Ð¾ÐµÐ·Ð´Ð°, Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ð° ÑÐµÑÐ°ÐµÑÑÑ
ÑÐµÑÐµÐ· Ð¿ÑÐ¾Ð²Ð¾Ð´Ð½Ð¸ÐºÐ° Ð¸Ð»Ð¸ Ð¿Ð¾Ð»Ð¸ÑÐ¸Ñ. ÐÐ¼ÐµÑÑÐ¾ ÑÐ¾Ð³Ð¾ ÑÑÐ¾Ð±Ñ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾ Ð¿Ð¾Ð²ÑÑÐµÐ½Ð¸Ð¸
ÑÐµÐ½Ñ Ð½Ð° ÑÐ¾Ð´ÐµÑÐ¶Ð°Ð½Ð¸Ðµ Ð´Ð¾Ð¼Ð° Ð² Ð±ÑÐ´Ð½Ð¸Ð¹ Ð´ÐµÐ½Ñ, Ð¾Ð± ÑÑÐ¾Ð¼ ÑÐ¾Ð¾Ð±ÑÐ°ÑÑ Ð¿Ð¸ÑÑÐ¼Ð¾Ð¼ Ð²
ÐºÐ¾Ð½ÑÐµ Ð½ÐµÐ´ÐµÐ»Ð¸ Ð¸Ð»Ð¸ Ð¿ÐµÑÐµÐ´ Ð¿ÑÐ°Ð·Ð´Ð½Ð¸ÐºÐ°Ð¼Ð¸, ÐºÐ¾Ð³Ð´Ð° ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ½ÑÐµ Ð·Ð²Ð¾Ð½ÐºÐ¸ Ñ
Ð²Ð¾Ð¿ÑÐ¾ÑÐ°Ð¼Ð¸ Ð½ÐµÐ²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ñ. ÐÐ¼ÐµÑÑÐ¾ ÑÐ¾Ð³Ð¾ ÑÑÐ¾Ð±Ñ Ð¿ÑÑÐ¼Ð¾ ÑÐ¾Ð¾Ð±ÑÐ¸ÑÑ Ð¾
Ð½ÐµÐ¶ÐµÐ»Ð°ÑÐµÐ»ÑÐ½Ð¾ÑÑÐ¸ ÑÐ²Ð¾ÐµÐ³Ð¾ ÑÑÐ°ÑÑÐ¸Ñ, ÑÐµÐ±Ðµ ÑÐ¾Ð¾Ð±ÑÐ°ÑÑ ÑÐ¾Ð²Ð½Ð¾ Ð¿ÑÐ¾ÑÐ¸Ð²Ð¾Ð¿Ð¾Ð»Ð¾Ð¶Ð½Ð¾Ðµ, Ð°
Ð·Ð°ÑÐµÐ¼ Ð±ÐµÐ· Ð»Ð¸ÑÐ½Ð¸Ñ ÑÐ°ÑÑÐ°ÑÐºÐ¸Ð²Ð°Ð½Ð¸Ð¹ Ð¿ÑÐ¾ÑÑÐ¾ Ð½Ðµ Ð´Ð¾Ð¿ÑÑÐºÐ°ÑÑ Ð´Ð¾&amp;nbsp;ÑÑÐ°ÑÑÐ¸Ñ.&lt;/p&gt;
&lt;p&gt;ÐÐµÐ·ÑÑÐ»Ð¾Ð²Ð½Ð¾, Ð² Ð¸Ð·Ð±ÐµÐ³Ð°Ð½Ð¸Ð¸ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ¾Ð² ÐµÑÑÑ Ð¸ Ð¾Ð³ÑÐ¾Ð¼Ð½ÑÐµ Ð¿Ð»ÑÑÑ. ÐÐ°Ð¿ÑÐ¸Ð¼ÐµÑ,
Ð½ÐµÐ¿ÑÐ¸Ð½ÑÑÐ¾ Ð·Ð°Ð´Ð°Ð²Ð°ÑÑ Ð¸Ð»Ð¸ Ð½Ð°ÑÑÐ°Ð¸Ð²Ð°ÑÑ Ð½Ð° Ð¿Ð¾ÑÐµÐ½ÑÐ¸Ð°Ð»ÑÐ½Ð¾ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ½ÑÑ Ð²Ð¾Ð¿ÑÐ¾ÑÐ°Ñ
Ð¾ Ð»Ð¸ÑÐ½Ð¾Ð¹ Ð¶Ð¸Ð·Ð½Ð¸, ÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ¸ÑÐ°ÑÑÑÑ Ð½Ð¾ÑÐ¼Ð°Ð»ÑÐ½ÑÐ¼Ð¸ Ð² Ð´ÑÑÐ³Ð¸Ñ ÐºÑÐ»ÑÑÑÑÐ°Ñ. Ð
ÐµÑÐµ ÑÑÐ¾ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¿ÑÐ¾ÑÑÐ¾ ÑÐ´Ð¾Ð±Ð½Ð¾ Ð¸ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾, ÐºÐ¾Ð³Ð´Ð° ÑÑÑÐµÑÑÐ²ÑÑÑ
ÑÐ°Ð±Ð¾ÑÐ°ÑÑÐ¸Ðµ &amp;#8220;Ð¿ÑÐ¾ÐºÐ»Ð°Ð´ÐºÐ¸&amp;#8221; Ð´Ð»Ñ ÑÐµÑÐµÐ½Ð¸Ñ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÑÑ ÑÐ¸ÑÑÐ°ÑÐ¸Ð¹, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ,
Ð¿Ð¾Ð»Ð¸ÑÐ¸Ñ Ð¸Ð»Ð¸&amp;nbsp;ÑÑÐ´.&lt;/p&gt;
&lt;p&gt;ÐÑÐ»ÑÐ¼Ð¸Ð½Ð°ÑÐ¸Ñ Ð² Ð²Ð¸Ð´Ðµ ÑÑÐµÐ·Ð¼ÐµÑÐ½Ð¾ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸ÑÐµÐ»ÑÐ½Ð¾Ð¹ ÑÐµÐ°ÐºÑÐ¸Ð¸ Ð½Ð° ÑÐ²Ð¾Ðµ Ð¾Ð±ÑÐµÑÐµÐ½Ð½Ð¾Ðµ
Ð½Ð° Ð¾ÑÐºÐ°Ð· Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ &amp;#8212; ÑÐ¾Ð¶Ðµ ÑÐ°ÑÑÑ Ð¸Ð·Ð±ÐµÐ³Ð°Ð½Ð¸Ñ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ¾Ð². Ð¡ÑÐ¸ÑÐ°ÐµÑÑÑ,
Ð±ÑÐ´ÑÐ¾ ÑÑÐ¾ Ð¿Ð¾Ð·Ð²Ð¾Ð»Ð¸Ñ ÑÐºÑÐ°ÑÐ¸ÑÑ ÑÑÑÑÑÑÐ°ÑÐ¸Ñ ÑÐµÐ»Ð¾Ð²ÐµÐºÐ°, Ð° Ð·Ð½Ð°ÑÐ¸Ñ, Ð¾Ð½ Ð½Ðµ Ð±ÑÐ´ÐµÑ
ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÐ¾Ð²Ð°ÑÑ Ð¸ Ð»ÐµÐ³ÑÐµ Ð¿ÑÐ¸Ð¼ÐµÑ Ð½ÐµÐ¿ÑÐ¸ÑÑÐ½ÑÐµ Ð½Ð¾Ð²Ð¾ÑÑÐ¸. Ð§ÐµÐ¼-ÑÐ¾ Ð¿Ð¾ÑÐ¾Ð¶Ð¸Ð¼
Ð¿Ð¾Ð»ÑÐ·ÑÑÑÑÑ Ð² Ð¼ÐµÑÐ¾Ð´Ð¸ÐºÐµ &lt;a class="reference external" href="https://www.wikihow.com/Give-a-Feedback-Sandwich"&gt;Feedback Sandwich&lt;/a&gt; Ð´Ð»Ñ ÐºÑÐ¸ÑÐ¸ÐºÐ¸ Ð¸
Ð¾Ð±ÑÐ°ÑÐ½Ð¾Ð¹ ÑÐ²ÑÐ·Ð¸, ÐºÐ¾Ð³Ð´Ð° Ð½ÐµÐ¿Ð¾ÑÑÐµÐ´ÑÑÐ²ÐµÐ½Ð½Ð°Ñ ÐºÑÐ¸ÑÐ¸ÐºÐ° Ð¾Ð±Ð¾ÑÐ°ÑÐ¸Ð²Ð°ÐµÑÑÑ. ÐÐ¾ Ð½Ð°
Ð¼Ð¾Ð¹ Ð²Ð¾ÑÑÐ¾ÑÐ½Ð¾ ÐµÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸Ð¹ Ð²ÐºÑÑ, ÑÐ°ÐºÐ¾Ð¹ ÑÑÐ½Ð´Ð²Ð¸Ñ Ð¾ÑÐ²ÑÐ°ÑÐ¸ÑÐµÐ»ÐµÐ½, Ð¿Ð¾ÑÐ¾Ð¼Ñ ÑÑÐ¾
Ð²ÑÐ·ÑÐ²Ð°ÐµÑ Ð´Ð°Ð¶Ðµ Ð±Ð¾Ð»ÑÑÐµÐµ ÑÐ°Ð·Ð¾ÑÐ°ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ, ÑÐµÐ¼ Ð¿ÑÑÐ¼Ð°Ñ&amp;nbsp;ÐºÑÐ¸ÑÐ¸ÐºÐ°.&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Ð¤Ð°ÐºÑÐ»ÑÑÐ°ÑÐ¸Ð²Ð½Ð¾Ðµ&amp;nbsp;Ð¾ÑÑÑÑÐ¿Ð»ÐµÐ½Ð¸Ðµ&lt;/h3&gt;
&lt;p&gt;ÐÐ½Ðµ ÐºÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ Ð² ÑÑÐ¾Ð¼ Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¸ Ð¸Ð·Ð±ÐµÐ³Ð°ÑÑ ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÑ Ð¸ ÑÐ¼Ð¾ÑÐ¸Ð¸ Ð½Ðµ
Ð¾Ð±Ð¾ÑÐ»Ð¾ÑÑ Ð±ÐµÐ· Ð±ÑÐ¸ÑÐ°Ð½ÑÐºÐ¸Ñ ÑÑÐ°Ð´Ð¸ÑÐ¸Ð¹ &lt;a class="reference external" href="https://youtu.be/i3WHkjylgS4"&gt;Ð²ÑÑÑÐ¸Ñ ÐºÐ»Ð°ÑÑÐ¾Ð²&lt;/a&gt;. ÐÐµÑÐ¾Ð¼Ð½ÐµÐ½Ð½Ð¾, Ð¾Ð½Ð¸ Ð¾ÐºÐ°Ð·Ð°Ð»Ð¸ Ð¾Ð³ÑÐ¾Ð¼Ð½Ð¾Ðµ
Ð²Ð»Ð¸ÑÐ½Ð¸Ðµ Ð½Ð° Ð¼Ð½Ð¾Ð³Ð¸Ðµ Ð·Ð°Ð¿Ð°Ð´Ð½ÑÐµ ÐºÑÐ»ÑÑÑÑÑ. ÐÐ¾Ð´ÑÐµÑÐºÐ½ÑÑÐ°Ñ ÑÐ¾Ð»Ð¾Ð´Ð½Ð¾ÑÑÑ, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Stiff_upper_lip"&gt;stiff
upper lip&lt;/a&gt; Ð²ÑÐ¿ÑÑÐºÐ½Ð¸ÐºÐ°
ÑÐ°ÑÑÐ½Ð¾Ð¹ Ð°Ð½Ð³Ð»Ð¸Ð¹ÑÐºÐ¾Ð¹ ÑÐºÐ¾Ð»Ñ Ð²Ð¸ÐºÑÐ¾ÑÐ¸Ð°Ð½ÑÐºÐ¾Ð¹ ÑÐ¿Ð¾ÑÐ¸, Ð´ÐµÐ»Ð¸ÐºÐ°ÑÐ½Ð¾Ðµ,
Ð´Ð¸Ð¿Ð»Ð¾Ð¼Ð°ÑÐ¸ÑÐ½Ð¾Ðµ Ð¾Ð±ÑÐµÐ½Ð¸Ðµ, ÑÐ°ÑÐ°ÐºÑÐµÑÐ½Ð¾Ðµ Ð´Ð»Ñ Ð¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð½ÑÑ Ð»ÑÐ´ÐµÐ¹ (&lt;em&gt;gentle&lt;/em&gt;
men), Ð½Ð¾ Ð² ÑÐ¾ Ð¶Ðµ Ð²ÑÐµÐ¼Ñ Ð¿ÑÐ¾Ð´Ð°Ð²Ð»Ð¸Ð²Ð°Ð½Ð¸Ðµ ÑÐ²Ð¾ÐµÐ¹ Ð²Ð¾Ð»Ð¸ Ð¸ ÑÑÐ¾Ð²ÐµÐ½Ñ
ÑÐ¼Ð¾ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½ÑÐµÐ»Ð»ÐµÐºÑÐ° ÐºÐ°Ðº Ñ Ð¿Ð¾Ð´ÑÐ¾ÑÑÐºÐ°, Ð¸ÑÐ¿ÑÑÐ°Ð²ÑÐµÐ³Ð¾ Ð½Ð° ÑÐµÐ±Ðµ
Ð´ÐµÐ´Ð¾Ð²ÑÐ¸Ð½Ñ ÐºÐ°Ð·Ð°ÑÐ¼Ñ (Ð° Ð¸Ð¼ÐµÐ½Ð½Ð¾ ÑÑÐ¸Ð¼ Ð¸ ÑÐ²Ð»ÑÐµÑÑÑ Ð³Ð¸Ð¼Ð½Ð°Ð·Ð¸Ñ Ð´Ð»Ñ&amp;nbsp;Ð¼Ð°Ð»ÑÑÐ¸ÐºÐ¾Ð²).&lt;/p&gt;
&lt;p&gt;ÐÑÐ»ÑÑÑÑÐ° Ð²ÑÐµÐ³Ð´Ð° ÑÐ¿ÑÑÐºÐ°ÐµÑÑÑ ÑÐ²ÐµÑÑÑ Ð²Ð½Ð¸Ð·, Ð¾Ñ ÑÐ»Ð¸Ñ Ðº Ð¿ÑÐ¾ÑÑÑÐ¼ Ð»ÑÐ´ÑÐ¼. Ð Ð¿Ð¾
Ð¼ÐµÑÐµ Ð¿ÑÐ¸Ð±Ð»Ð¸Ð¶ÐµÐ½Ð¸Ñ Ð¿ÑÐ¾ÑÑÑÑ Ð»ÑÐ´ÐµÐ¹ Ðº ÑÐ»Ð¸ÑÐ°Ð¼ Ð¿Ð¾ ÑÑÐ¾Ð²Ð½Ñ Ð¿ÑÐ°Ð² (Ð° Ð¸Ð¼ÐµÐ½Ð½Ð¾ Ð²
ÑÑÐ¾Ð¼ Ð¸ ÑÐ¾ÑÑÐ¾Ð¸Ñ ÑÐ°Ð·Ð²Ð¸ÑÐ¸Ðµ Ð·Ð°Ð¿Ð°Ð´Ð½Ð¾Ð³Ð¾ Ð¾Ð±ÑÐµÑÑÐ²Ð°), Ð²Ð¾Ð·Ð½Ð¸ÐºÐ°ÐµÑ Ð¸ ÐºÐ¾Ð½Ð²ÐµÑÐ³ÐµÐ½ÑÐ¸Ñ
Ð½ÑÐ°Ð²Ð¾Ð². ÐÐ¾ÑÑÐ¾Ð¼Ñ Ð½Ðµ ÑÐ´Ð¸Ð²Ð¸ÑÐµÐ»ÑÐ½Ð¾, ÑÑÐ¾ ÑÐ°ÐºÐ¾Ðµ &amp;#8220;Ð´Ð¶ÐµÐ½ÑÐµÐ»ÑÐ¼ÐµÐ½ÑÑÐ²Ð¾&amp;#8221;
ÑÐ°ÑÐ¿ÑÐ¾ÑÑÑÐ°Ð½Ð¸Ð»Ð¾ÑÑ Ð´Ð¾Ð²Ð¾Ð»ÑÐ½Ð¾&amp;nbsp;ÑÐ¸ÑÐ¾ÐºÐ¾.&lt;/p&gt;
&lt;p&gt;Ð Ð Ð¾ÑÑÐ¸Ð¸ Ð¿ÑÐµÐµÐ¼ÑÑÐ²ÐµÐ½Ð½Ð¾ÑÑÑ ÑÐ»Ð¸Ñ Ð±ÑÐ»Ð° Ð½Ð°ÑÑÑÐµÐ½Ð° Ð² Ð½Ð°ÑÐ°Ð»Ðµ &lt;span class="caps"&gt;XX&lt;/span&gt; Ð²ÐµÐºÐ°, ÐºÑÐ»ÑÑÑÑÐ°
Ð´Ð»Ñ Ð²Ð½Ð¾Ð²Ñ Ð²Ð¾Ð·Ð½Ð¸ÐºÑÐ¸Ñ ÑÐ¾ÑÐ»Ð¾Ð²Ð¸Ð¹ ÑÐ°Ðº Ð¸ Ð½Ðµ ÑÑÐ¿ÐµÐ»Ð° ÑÑÐ¾ÑÐ¼Ð¸ÑÐ¾Ð²Ð°ÑÑÑÑ Ð¸Ð·-Ð·Ð°
ÑÐµÐ²Ð¾Ð»ÑÑÐ¸Ð¸ Ð¸ Ð³ÑÐ°Ð¶Ð´Ð°Ð½ÑÐºÐ¾Ð¹ Ð²Ð¾Ð¹Ð½Ñ. Ð ÑÐ¾Ð²ÐµÑÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÐµÐºÑ, Ð¾ÑÐ²ÐµÑÐ³Ð°Ð²ÑÐ¸Ð¹ Ð¿ÑÐµÐ¶Ð½ÑÑ
ÐºÑÐ»ÑÑÑÑÑ, Ð¿ÑÐµÐ´Ð»Ð¾Ð¶Ð¸Ð» Ð½Ð° Ð·Ð°Ð¼ÐµÐ½Ñ ÐºÑÐ»ÑÑÑÑÑ Ð±Ð¾Ð»ÐµÐµ&amp;nbsp;Ð¿ÑÑÐ¼Ð¾Ð»Ð¸Ð½ÐµÐ¹Ð½ÑÑ.&lt;/p&gt;
&lt;p&gt;Ð ÑÐ¾ÑÐµÑÐ°Ð½Ð¸Ð¸ Ñ ÑÐ°ÑÐ°ÐºÑÐµÑÐ½Ð¾ ÑÑÑÑÐºÐ¸Ð¼ Ð¾ÑÑÑÑÐ¼ Ð²Ð¾ÑÐ¿ÑÐ¸ÑÑÐ¸ÐµÐ¼ Ð½ÐµÑÐ¿ÑÐ°Ð²ÐµÐ´Ð»Ð¸Ð²Ð¾ÑÑÐ¸,
Ð±Ð¾Ð»ÑÑÐµÐ¹ Ð»Ð¸ÑÐµÑÐ°ÑÑÑÐ¾ÑÐµÐ½ÑÑÐ¸ÑÐ½Ð¾ÑÑÑÑ, Ð½ÐµÐ¶ÐµÐ»Ð¸ ÑÑÑÐ½Ð¾Ð¹ ÑÐµÑÑÑ, Ð´ÑÐ¼Ð°Ñ, Ð½Ð°Ð¼
ÑÐ»Ð¾Ð¶Ð½ÐµÐµ Ð²Ð¾ÑÐ¿ÑÐ¸Ð½Ð¼Ð°ÑÑ Ð·Ð°Ð¿ÑÑÐ°Ð½Ð½ÑÑ &amp;#8220;Ð´Ð¸Ð¿Ð»Ð¾Ð¼Ð°ÑÐ¸Ñ&amp;#8221; Ð¿Ð¾Ð»ÑÐ½Ð°Ð¼ÐµÐºÐ¾Ð² Ñ Ð¿Ð¾ÑÑÐ¾ÑÐ½Ð½Ð¾
ÑÐ°Ð±Ð¾ÑÐ°ÑÑÐ¸Ð¼ Ð¼ÐµÑÐ°Ð½Ð¸Ð·Ð¼Ð¾Ð¼ Ð¾ÑÐ±Ð¾ÑÐ°&amp;nbsp;ÑÐ²Ð¾Ð¹-ÑÑÐ¶Ð¾Ð¹.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;Ð§ÑÐ¾ Ñ ÑÑÐ¸Ð¼&amp;nbsp;Ð´ÐµÐ»Ð°ÑÑ?&lt;/h2&gt;
&lt;p&gt;Ð Ð¿ÐµÑÐ²ÑÑ Ð¾ÑÐµÑÐµÐ´Ñ, ÑÑÐ¾ Ð½ÑÐ¶Ð½Ð¾ Ð·Ð½Ð°ÑÑ Ð¸ Ð´ÐµÑÐ¶Ð°ÑÑ Ð² Ð³Ð¾Ð»Ð¾Ð²Ðµ. ÐÑÐ»Ð¸ Ñ Ð²Ð°Ñ
Ð²Ð¾Ð·Ð½Ð¸ÐºÐ»Ð¸ ÑÐ¾Ð¼Ð½ÐµÐ½Ð¸Ñ Ð¸ ÐµÑÑÑ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÑ ÑÑÐ¸ ÑÐ¾Ð¼Ð½ÐµÐ½Ð¸Ñ Ð¿ÑÐµÐºÑÐ°ÑÐ¸ÑÑ Ð½Ð° Ð¼ÐµÑÑÐµ,
ÑÑÐºÐ¾Ð½Ð¾Ð¼Ð¸Ð² Ð½ÐµÑÐ²Ñ, Ð²ÑÐµÐ¼Ñ Ð¸ Ð´ÐµÐ½ÑÐ³Ð¸ &amp;#8212; Ð½ÑÐ¶Ð½Ð¾ Ð¸Ð¼ÐµÐ½Ð½Ð¾ ÑÑÐ¾ Ð¸&amp;nbsp;ÑÐ´ÐµÐ»Ð°ÑÑ.&lt;/p&gt;
&lt;p&gt;ÐÐ°Ð¼ Ð¼Ð¾Ð¶ÐµÑ Ð¿Ð¾Ð¼Ð¾ÑÑ Ð² ÑÐµÐ»Ð¾Ð¼ Ð±ÐµÑÐ¿Ð¾Ð»ÐµÐ·Ð½ÑÐ¹ ÑÐµÐ³Ð¾Ð´Ð½Ñ ÐÐ¸Ð³Ð¼ÑÐ½Ð´ Ð¤ÑÐ¾Ð¹Ð´. ÐÐ³Ð¾
&amp;#8220;ÐÑÐ¸ÑÐ¾Ð¿Ð°ÑÐ¾Ð»Ð¾Ð³Ð¸Ñ Ð¾Ð±ÑÐ´ÐµÐ½Ð½Ð¾Ð¹ Ð¶Ð¸Ð·Ð½Ð¸&amp;#8221; Ð½Ð°ÑÑÐ¸Ñ ÑÐ°ÑÐ¿Ð¾Ð·Ð½Ð°Ð²Ð°ÑÑ Ð¼ÐµÐ»ÐºÐ¸Ðµ ÑÐ¸Ð¼Ð¿ÑÐ¾Ð¼Ñ
Ð¸ÑÑÐ¸Ð½Ð½ÑÑ Ð½Ð°Ð¼ÐµÑÐµÐ½Ð¸Ð¹&amp;nbsp;Ð»ÑÐ´ÐµÐ¹.&lt;/p&gt;
&lt;p&gt;Ð ÐµÑÐµ Ð¾ÑÐµÐ½Ñ Ð²Ð°Ð¶Ð½Ð¾Ðµ Ð·Ð°Ð¼ÐµÑÐ°Ð½Ð¸Ðµ: Ñ Ð½Ð°Ñ ÐµÑÑÑ Ð½Ð°ÑÑÐ¾ÑÑÐ¸Ð¹ ÐºÑÐ»ÑÑ Ð²ÑÐµÐ³Ð¾
Ð¸Ð½Ð¾ÑÑÑÐ°Ð½Ð½Ð¾Ð³Ð¾ Ð¸ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾ Ð·Ð°Ð¿Ð°Ð´Ð½Ð¾Ð³Ð¾. Ð ÑÑÐ¾Ð¼ ÐºÑÐ»ÑÑÐµ Ð»ÑÐ´Ð¸ Ð´Ð¾ÑÐ¾Ð´ÑÑ Ð´Ð¾
ÑÑÐ¼Ð°ÑÑÐµÑÑÐ²Ð¸Ñ Ð¸ Ð¿Ð¾Ð¿ÑÑÐºÐ¸ Ð¿ÐµÑÐµÐºÑÐ¾Ð¸ÑÑ ÑÐ²Ð¾Ñ Ð¸Ð´ÐµÐ½ÑÐ¸ÑÐ½Ð¾ÑÑÑ Ð½Ð° Ð·Ð°Ð¿Ð°Ð´Ð½ÑÐ¹
Ð¼Ð°Ð½ÐµÑ. ÐÐ¾ ÐºÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ Ð¸Ð¼ÐµÐ½Ð½Ð¾ ÑÐ¾Ñ ÑÐ»ÑÑÐ°Ð¹, ÐºÐ¾Ð³Ð´Ð° Ð½Ð°Ð´Ð¾ Ð¿ÑÐµÐ´ÑÐ¿ÑÐµÐ¶Ð´Ð°ÑÑ:
&amp;#8220;Ð½Ðµ Ð¿ÑÑÐ°Ð¹ÑÐµÑÑ Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÑ ÑÑÐ¾ Ð´Ð¾Ð¼Ð°!&amp;#8221; Ð¯ ÑÐ²ÐµÑÐµÐ½, ÑÑÐ¾ Ð²ÑÐ»ÐµÐ´ Ð·Ð° ÐºÑÐ¸ÑÐ¸ÐºÐ¾Ð¹
Ð¾Ð¿Ð¸ÑÐ°Ð½Ð½Ð¾Ð³Ð¾ Ð²ÑÑÐµ &lt;em&gt;Ð¼ÐµÑÐ¾Ð´Ð° Ð¡ÑÐ½Ð´Ð²Ð¸ÑÐ°&lt;/em&gt; ÐºÐ¾Ð³Ð´Ð°-Ð½Ð¸Ð±ÑÐ´Ñ Ð¼Ñ Ð´Ð¾Ð¶Ð´ÐµÐ¼ÑÑ Ð¸ ÐºÑÐ¸ÑÐ¸ÐºÐ¸
ÑÑÑÑÑÑÐ¸ÑÑÑÑÐµÐ¹ ÑÐ¾Ð·Ð½Ð°Ð½Ð¸Ðµ Ð²Ð¾ÑÑÐ¾ÑÐ½Ð¾Ð³Ð¾ ÐµÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐ° Ð¼Ð°Ð½ÐµÑÑ Ð³Ð¾Ð²Ð¾ÑÐ¸ÑÑ &amp;#8220;Ð´Ð°&amp;#8221;, Ð¸Ð¼ÐµÑ
Ð² Ð²Ð¸Ð´Ñ &amp;#8220;Ð½ÐµÑ&amp;#8221;. ÐÐ°Ð¶ÐµÑÑÑ, ÑÑÐ¾ Ð½Ð°ÑÐ° Ð¿ÑÑÐ¼Ð¾Ð»Ð¸Ð½ÐµÐ¹Ð½Ð°Ñ Ð¼Ð°Ð½ÐµÑÐ° Ð¾Ð±ÑÐµÐ½Ð¸Ñ, Ð¿ÑÑÑÑ
Ð³Ð´Ðµ-ÑÐ¾ Ð³ÑÑÐ±Ð¾Ð²Ð°ÑÐ°Ñ, Ð² ÑÐµÐ»Ð¾Ð¼ Ð³Ð¾ÑÐ°Ð·Ð´Ð¾ Ð±Ð¾Ð»ÐµÐµ Ð·Ð´Ð¾ÑÐ¾Ð²Ð°Ñ Ð¸ Ð¿Ð¾Ð´ÑÐ¾Ð´ÑÑÐ°Ñ Ð´Ð»Ñ ÑÐ¾Ð¹
ÐÐ»Ð¾Ð±Ð°Ð»ÑÐ½Ð¾Ð¹ ÐÐµÑÐµÐ²Ð½Ð¸, Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¹ Ð¼Ñ Ð²ÑÐµ ÑÐµÐ³Ð¾Ð´Ð½Ñ&amp;nbsp;Ð¾ÐºÐ°Ð·Ð°Ð»Ð¸ÑÑ.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ÐºÑÐ»ÑÑÑÑÐ°"></category><category term="ru"></category></entry><entry><title>Python MRO and MixinÂ Classes</title><link href="https://blog.pilosus.org/posts/2019/05/02/python-mixin/" rel="alternate"></link><published>2019-05-02T13:50:00+03:00</published><updated>2019-05-02T13:50:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-02:/posts/2019/05/02/python-mixin/</id><summary type="html">&lt;p class="first last"&gt;Understanding Python&amp;#8217;s Method Resolution Order may be
helpful when using mixin&amp;nbsp;classes&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In practice we don&amp;#8217;t usually think about how Python&amp;#8217;s &lt;span class="caps"&gt;MRO&lt;/span&gt;
works. Complex multiple inheritance legitemately considered to be a
bad thing. Usually we have very straight forward hierarchies like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But one application for relatively complex inheritance hierarchies is
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mixin"&gt;mixin&lt;/a&gt; classes. We can use the
following so called &lt;em&gt;diamond inheritance&lt;/em&gt; to add some checks to the
method &lt;tt class="docutils literal"&gt;do&lt;/tt&gt; we are interested&amp;nbsp;in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Top class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Top.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Left class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Left.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Left.do expected integer values only&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# We explicitly return parent&amp;#39;s do method.&lt;/span&gt;
        &lt;span class="c1"&gt;# If there was no such return, then Right.do would never be called&lt;/span&gt;
        &lt;span class="c1"&gt;# when Bottom.do() is called&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Right class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Right.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Right.do expected positive numbers only&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bottom class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bottom.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can instantiate &lt;tt class="docutils literal"&gt;Top&lt;/tt&gt; class when no checks in &lt;tt class="docutils literal"&gt;do&lt;/tt&gt; method
needed, we can use class &lt;tt class="docutils literal"&gt;Left&lt;/tt&gt; when workgin with integers or we can
use &lt;tt class="docutils literal"&gt;Right&lt;/tt&gt; class when working with non-negative numbers. When both
checks are needed though, we use the &lt;tt class="docutils literal"&gt;Bottom&lt;/tt&gt; class.&lt;/p&gt;
&lt;p&gt;The initialization of the &lt;tt class="docutils literal"&gt;Bottom&lt;/tt&gt; class reveals it&amp;#8217;s &lt;span class="caps"&gt;MRO&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Bottom&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;Top&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;

&lt;span class="nc"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#8217;s see how multiple inheritance&amp;nbsp;works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;eceeaaa850f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f358c005e4dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;39&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="mi"&gt;40&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bottom.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f358c005e4dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;14&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="mi"&gt;15&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Left.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;         &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Left.do expected integer values only&amp;#39;&lt;/span&gt;
     &lt;span class="mi"&gt;17&lt;/span&gt;         &lt;span class="c1"&gt;# We explicitly return parent&amp;#39;s do method.&lt;/span&gt;
     &lt;span class="mi"&gt;18&lt;/span&gt;         &lt;span class="c1"&gt;# If there was no such return, then Right.do would never be called&lt;/span&gt;

&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Bottom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f82b823fc4ec&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f358c005e4dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;39&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="mi"&gt;40&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bottom.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f358c005e4dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;18&lt;/span&gt;         &lt;span class="c1"&gt;# If there was no such return, then Right.do would never be called&lt;/span&gt;
     &lt;span class="mi"&gt;19&lt;/span&gt;         &lt;span class="c1"&gt;# when Bottom.do() is called&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;21&lt;/span&gt;
     &lt;span class="mi"&gt;22&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f358c005e4dd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;28&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="mi"&gt;29&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Right.do&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;         &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Right.do expected positive numbers only&amp;#39;&lt;/span&gt;
     &lt;span class="mi"&gt;31&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;32&lt;/span&gt;

&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;positive&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See more about the inner workings of the &lt;span class="caps"&gt;MRO&lt;/span&gt; in my article about &lt;a class="reference external" href="https://blog.pilosus.org/posts/2019/05/02/python-mro/"&gt;C3
linearisation algorithm&lt;/a&gt;.&lt;/p&gt;
</content><category term="python"></category><category term="mro"></category><category term="mixin"></category></entry><entry><title>Python Method Resolution Order and C3 linearizationÂ algorithm</title><link href="https://blog.pilosus.org/posts/2019/05/02/python-mro/" rel="alternate"></link><published>2019-05-02T12:10:00+03:00</published><updated>2019-05-02T12:10:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-02:/posts/2019/05/02/python-mro/</id><summary type="html">&lt;p class="first last"&gt;A naÃ¯ve implementation of C3 linearization algorithm that
lies under the hood of Python&amp;#8217;s Method Resolution Order
(&lt;span class="caps"&gt;MRO&lt;/span&gt;)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Method Resolution Order (&lt;span class="caps"&gt;MRO&lt;/span&gt;) is a order in which methods should be
inherited in the case of multiple iheritance. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 linearization
algorithm&lt;/a&gt; is how &lt;span class="caps"&gt;MRO&lt;/span&gt; works under the hood since &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;version 2.3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C3_linearization"&gt;Wikipedia&lt;/a&gt; does a great job explaining the algorithm. It can be
reduced to the following&amp;nbsp;steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Linearization (i.e. resolution order) is a &lt;em&gt;class itself&lt;/em&gt; and a
&lt;em&gt;merge&lt;/em&gt; of the linearizations of its parents and a list of the
parents&amp;nbsp;itself&lt;/li&gt;
&lt;li&gt;Linearization of the class with no parents equals to the class&amp;nbsp;itself.&lt;/li&gt;
&lt;li&gt;Merge process is done by selecting the first head of the lists
which does not appear in the tail of any of the lists. Where &lt;em&gt;head&lt;/em&gt;
is the first element of the list, and &lt;em&gt;tail&lt;/em&gt; is all but first
elements of the list. The heads are repeatedly selected and added
to the resulting &lt;span class="caps"&gt;MRO&lt;/span&gt; until all the lists are&amp;nbsp;exhausted.&lt;/li&gt;
&lt;li&gt;If a head cannot be selected while not all the lists are exhausted
merge is impossible to compute due to inconsistent orderings of
dependencies in the inheritance hierarchy and no linearization of
the original class&amp;nbsp;exists.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="Multiple Inheritance Example" class="responsive" src="https://blog.pilosus.org/images/c3_linearization.png" /&gt;
&lt;p class="caption"&gt;Complex multiple inheritance example, courtesy &lt;a class="reference external" href="https://commons.wikimedia.org/wiki/File:C3_linearization_example.svg"&gt;H2power&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Consider linearization process for a class &lt;tt class="docutils literal"&gt;K1&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// first, find the linearizations of K1&amp;#39;s parents, L(A), L(B), and L(C),
// and merge them with the parent list [A, B, C]
L(K1) := [K1] + merge(L(A), L(B), L(C), [A, B, C])
// class A is a good candidate for the first merge step, because it only
// appears as the head of the first and last lists
       = [K1] + merge([A, O], [B, O], [C, O], [A, B, C])
// class O is not a good candidate for the next merge step, because it also
// appears in the tails of list 2 and 3; but class B is a good candidate
       = [K1, A] + merge([O], [B, O], [C, O], [B, C])
// class C is a good candidate; class O still appears in the tail of list 3
       = [K1, A, B] + merge([O], [O], [C, O], [C])
// finally, class O is a valid candidate, which also exhausts all remaining lists
       = [K1, A, B, C] + merge([O], [O], [O])
       = [K1, A, B, C, O]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So at the higher level a naive implementation of the C3 linearization
algorith can be expressed as a simple&amp;nbsp;recursion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;  Return a list of classes in order corresponding to Python&amp;#39;s MRO.&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;kls&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;tt class="docutils literal"&gt;_merge&lt;/tt&gt; repeatedly checks if its lists are exhausted and
append appropriate heads to the resulting &lt;span class="caps"&gt;MRO&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="n"&gt;linearizations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DependencyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;linearizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exhausted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linearizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;linearizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tails&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
              &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="n"&gt;linearizations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

              &lt;span class="c1"&gt;# Once candidate is found, continue iteration&lt;/span&gt;
              &lt;span class="c1"&gt;# from the first element of the list&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# Loop never broke, no linearization could possibly be found&lt;/span&gt;
          &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cannot compute linearization, a cycle found&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to hide some lists internals &lt;tt class="docutils literal"&gt;Dependency&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;DependencyList&lt;/tt&gt; abstractions are&amp;nbsp;used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return islice object, which is suffice for iteration or calling `in`&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DependencyList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A class represents list of linearizations (dependencies)&lt;/span&gt;

&lt;span class="sd"&gt;    The last element of DependencyList is a list of parents.&lt;/span&gt;
&lt;span class="sd"&gt;    It&amp;#39;s needed  to the merge process preserves the local&lt;/span&gt;
&lt;span class="sd"&gt;    precedence order of direct parent classes.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Dependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__contains__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return True if any linearization&amp;#39;s tail contains an item&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DependencyList&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return self so that __contains__ could be called&lt;/span&gt;

&lt;span class="sd"&gt;        Used for readability reasons only&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exhausted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Return True if all elements of the lists are exhausted&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Remove an item from the lists&lt;/span&gt;

&lt;span class="sd"&gt;        Once an item removed from heads, the leftmost elements of the tails&lt;/span&gt;
&lt;span class="sd"&gt;        get promoted to become the new heads.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_lists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The whole codebase can be found in my &lt;a class="reference external" href="https://github.com/pilosus/c3linear"&gt;c3linear repository&lt;/a&gt;. You can
install it from the source code or via&amp;nbsp;PyPI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py install  &lt;span class="c1"&gt;# from the source code&lt;/span&gt;
pip install c3linear  &lt;span class="c1"&gt;# from the Cheese Shop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then just import it and check against Python&amp;#8217;s object&amp;#8217;s &lt;tt class="docutils literal"&gt;mro&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;c3linear.mro&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mro&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look at the &lt;a class="reference external" href="https://github.com/pilosus/c3linear/blob/master/tests/test_mro.py"&gt;tests&lt;/a&gt; to dive into more complex multiple inheritance&amp;nbsp;examples.&lt;/p&gt;
</content><category term="python"></category><category term="cpython"></category><category term="mro"></category><category term="algorithms"></category></entry><entry><title>Pelican blog: up andÂ running</title><link href="https://blog.pilosus.org/posts/2019/05/01/pelican-blog-up-and-running/" rel="alternate"></link><published>2019-05-01T11:30:00+03:00</published><updated>2019-05-01T11:30:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-05-01:/posts/2019/05/01/pelican-blog-up-and-running/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; is a static site generator written in Python. I use it for
&lt;a class="reference external" href="https://blog.pilosus.org"&gt;my personal blog&lt;/a&gt;. Pelican is easy to install, configure and
customize with themes and plugins. I was able to set up the blog with
my own &lt;a class="reference external" href="https://github.com/pilosus/pilosus-pelican-theme"&gt;custom theme&lt;/a&gt; and an &lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_og"&gt;Open Graph plugin&lt;/a&gt; in a few&amp;nbsp;hours â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; is a static site generator written in Python. I use it for
&lt;a class="reference external" href="https://blog.pilosus.org"&gt;my personal blog&lt;/a&gt;. Pelican is easy to install, configure and
customize with themes and plugins. I was able to set up the blog with
my own &lt;a class="reference external" href="https://github.com/pilosus/pilosus-pelican-theme"&gt;custom theme&lt;/a&gt; and an &lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_og"&gt;Open Graph plugin&lt;/a&gt; in a few&amp;nbsp;hours.&lt;/p&gt;
&lt;p&gt;Before Pelican I also used &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;. But since my
first language is Python and Ruby ecosystem seems to be in a decline,
I deciced to stick to a framework where I can express myself as
idiomatic as I can. Last but not least, having to write documentation
for Python code with &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; I also got used to &lt;a class="reference external" href="https://docutils.readthedocs.io/en/sphinx-docs/user/rst/quickstart.html"&gt;ReStructuredText&lt;/a&gt;
format, which is supported by Pelican out of the&amp;nbsp;box.&lt;/p&gt;
&lt;p&gt;In this post I&amp;#8217;m not going repeat the Pelican&amp;#8217;s great
documentation. Instead I will focus on the step that allows you&amp;nbsp;to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Set up your blog&amp;nbsp;quickly&lt;/li&gt;
&lt;li&gt;Add your own theme to&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;Extend Pelican&amp;#8217;s basic functionality with a&amp;nbsp;plugin&lt;/li&gt;
&lt;li&gt;Automate build and deploy process,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;Host your static site with &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; under your custom&amp;nbsp;domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use Pelican verion 4.0.1, invoke 1.2.0 and ghp-import 0.5.5 in this&amp;nbsp;post.&lt;/p&gt;
&lt;div class="section" id="install-pelican"&gt;
&lt;h2&gt;Install&amp;nbsp;Pelican&lt;/h2&gt;
&lt;p&gt;Personally I use &lt;a class="reference external" href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt; for Python version management. I also use
&lt;a class="reference external" href="https://github.com/pyenv/pyenv-virtualenv"&gt;pyenv-virtualenv&lt;/a&gt; plugin to incorporate &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; into it. So
my workflow for the Python projects that do not require
containerization is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create directory for the project, cd to it&lt;/span&gt;
$ mkdir my-project &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; my-project

&lt;span class="c1"&gt;# Set up virtual env with Python version needed&lt;/span&gt;
$ pyenv virtualenv &lt;span class="m"&gt;3&lt;/span&gt;.7.2 venv

&lt;span class="c1"&gt;# Activate virtualenv&lt;/span&gt;
$ pyenv activate venv

&lt;span class="c1"&gt;# Initialize git reposotory, add README and basic .gitignore&lt;/span&gt;
$ git init
$ touch README.md
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*~&amp;#39;&lt;/span&gt; &amp;gt; .gitignore
$ git commit -m &lt;span class="s1"&gt;&amp;#39;Initial commit&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that a repository for your project is ready, install &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt;
package, fix its version and initialize the&amp;nbsp;app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican
$ pip freeze &lt;span class="p"&gt;|&lt;/span&gt; grep pelican &amp;gt; requirements.txt
$ git commit -a -m &lt;span class="s1"&gt;&amp;#39;Fix pelican version&amp;#39;&lt;/span&gt;
$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the questions are pretty straightforward. One thing I would advise
though is to confirm that you do want to &lt;strong&gt;automate site generation and
publication&lt;/strong&gt;. This step will create a &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; and invoke&amp;#8217;s
&lt;tt class="docutils literal"&gt;tasks.py&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-theme"&gt;
&lt;h2&gt;Custom&amp;nbsp;Theme&lt;/h2&gt;
&lt;p&gt;You can find a ton of Pelican themes in the wild. It&amp;#8217;s so
overwhelmingly huge amount of custom themes that I had just given up
on finding a theme that&amp;#8217;s just right for me. Instead I&amp;#8217;ve build my own
&lt;a class="reference external" href="https://github.com/pilosus/pilosus-pelican-theme"&gt;custom theme&lt;/a&gt;. It&amp;#8217;s responsive, lightweight and clean. For rapid
development I used &lt;a class="reference external" href="http://getskeleton.com/"&gt;Skeleton&lt;/a&gt;, which is a modern &lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;nbsp;boilerplate.&lt;/p&gt;
&lt;p&gt;Although it&amp;#8217;s recommended to install your theme either by copying it
to the Pelican&amp;#8217;s theme path or by creating a symlink, I used &lt;tt class="docutils literal"&gt;git
submodule&lt;/tt&gt; add theme in my blog repo directory. Then I added a path
to the theme under &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;THEME&lt;/span&gt;&lt;/tt&gt; variable in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my-project
$ git submodule add https://github.com/pilosus/pilosus-pelican-theme.git themes/pilosus-pelican-theme
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;THEME = &amp;#39;themes/pilosus-pelican-theme&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now my custom theme is versioned and can be easily developed
separately from the blog. The blog may be generated with whatever
theme version I like. I will only need to checkout my submodule to the
version I&amp;nbsp;need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;The first thing I was disappointed in Pelican&amp;#8217;s default theme is a
lack of &lt;a class="reference external" href="http://ogp.me/"&gt;Open Graph&lt;/a&gt; tags. You cannot just add custom metadata to
your content files and use it in the theme. The easiest way to tackle
this problem is &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/plugins.html"&gt;plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I derived my &lt;a class="reference external" href="https://github.com/pilosus/pilosus_pelican_og"&gt;Open Graph plugin&lt;/a&gt; from &lt;a class="reference external" href="https://github.com/whiskyechobravo/pelican-open_graph"&gt;this one&lt;/a&gt; by tweaking the
things I didn&amp;#8217;t like. Say, the original plugin gets &lt;tt class="docutils literal"&gt;og:image&lt;/tt&gt; by
parsing images from the rendered &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/tt&gt; content, which is strange,
ineffective and will certainly produce low-quality results in many
cases. That&amp;#8217;s why I decided to develop my own&amp;nbsp;plugin.&lt;/p&gt;
&lt;p&gt;Again, I find installing plugin as a &lt;tt class="docutils literal"&gt;git submodule&lt;/tt&gt; a great way to
keep the code versioned, site deployments deterministic and
maintanence predictable and&amp;nbsp;easy.&lt;/p&gt;
&lt;p&gt;I place plugins under &lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; directory in my blog repo, then
define &lt;tt class="docutils literal"&gt;PLUGIN_PATHS&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PLUGINS&lt;/span&gt;&lt;/tt&gt; variables in the&amp;nbsp;settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my-project
$ git submodule add https://github.com/pilosus/pilosus_pelican_og plugins/pilosus_pelican_og
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PLUGIN_PATHS = [&amp;#39;plugins&amp;#39;]&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; pelicanconf.py
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PLUGINS = [&amp;#39;pilosus_pelican_og&amp;#39;,]&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="build-and-deploy-automation"&gt;
&lt;h2&gt;Build and Deploy&amp;nbsp;Automation&lt;/h2&gt;
&lt;p&gt;Our goal is to generate a static site, that can be pushed and served
by the GitHub Pages with custom domain support. To make this process
less tedious some automation is&amp;nbsp;essential.&lt;/p&gt;
&lt;p&gt;If you have followed an advice in the &lt;a class="reference internal" href="#install-pelican"&gt;Install Pelican&lt;/a&gt; section to
opt for automation, then you&amp;#8217;ve got &lt;tt class="docutils literal"&gt;tasks.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;
installed. Although I do use &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; in some of my projects I
decided to give &lt;tt class="docutils literal"&gt;invoke&lt;/tt&gt; a try. So the following recipe is all about
&lt;tt class="docutils literal"&gt;tasks.py&lt;/tt&gt; that &lt;tt class="docutils literal"&gt;invoke&lt;/tt&gt; uses.&lt;/p&gt;
&lt;p&gt;We need to install &lt;tt class="docutils literal"&gt;invoke&lt;/tt&gt; package in your virtualenv, as well as
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; for GitHub Page push. Don&amp;#8217;t forget to fix all
dependencies in the &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; my-project
$ pyenv activate venv
$ pip install invoke
$ pip freeze &lt;span class="p"&gt;|&lt;/span&gt; grep invoke &amp;gt;&amp;gt; requirements.txt
$ pip install ghp-import
$ pip freeze &lt;span class="p"&gt;|&lt;/span&gt; grep invoke &amp;gt;&amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have all dependencies installed let&amp;#8217;s add a new task for
GitHub Pages&amp;nbsp;deployment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Publish to GitHub Pages&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;cname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ghp-import -b {github_pages_branch} &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;-m {commit_message} &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;{deploy_path} -p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push --force {github_repo} &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;{github_pages_branch}:{github_repo_target_branch}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;preview(c)&lt;/tt&gt; is a predefined &lt;tt class="docutils literal"&gt;invoke&lt;/tt&gt; task that generates static
files for production environment (i.e. with &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt;
settings&amp;nbsp;file).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;cname(c)&lt;/tt&gt; is a task that generates a file called &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&lt;/tt&gt; with a
hostname of your custom&amp;nbsp;domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Generate CNAME file with you custom domain name&lt;/span&gt;

&lt;span class="sd"&gt;  Its used in GitHub Pages. Otherwise custom domain name setting&lt;/span&gt;
&lt;span class="sd"&gt;  gets reset on each git push to GH Page repo.&lt;/span&gt;
&lt;span class="sd"&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;echo {custom_domain_name} &amp;gt; {deploy_path}/CNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;cname&lt;/tt&gt; docstring says it all. You really need this&amp;nbsp;file!&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ghp-import&lt;/span&gt;&lt;/tt&gt; command checks out you output directory (i.e. the one
used for generated static files) to the GitHub Pages branch of your
project. Then &lt;tt class="docutils literal"&gt;git push &lt;span class="pre"&gt;--force&lt;/span&gt;&lt;/tt&gt; pushes this branch to the
repository for static GitHub Pages (it should be named as
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;your-github-login.github.io&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Configuration you use throughout the invoke&amp;#8217;s &lt;tt class="docutils literal"&gt;tasks.py&lt;/tt&gt; may look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# Local path to content directory&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;content_path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Local path configuration (can be absolute or relative to tasks.py)&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;deploy_path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Github Pages configuration&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;github_pages_branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gh-pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;github_repo_target_branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;github_repo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git@github.com:pilosus/pilosus.github.io.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;custom_domain_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blog.pilosus.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;commit_message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;Publish site on {}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="c1"&gt;# Port for `serve`&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keeping two separate repositories (one for the blog and another one
for the static files it generates) allows you to make your blog
repository private. You can keep some secrets or some code you don&amp;#8217;t
want to share. But still your generated files will be accessible to
others in the second&amp;nbsp;repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-workflow"&gt;
&lt;h2&gt;Pelican&amp;nbsp;Workflow&lt;/h2&gt;
&lt;p&gt;Now that we have defined all the &lt;tt class="docutils literal"&gt;invoke&lt;/tt&gt; tasks, we can discuss
Pelican&amp;#8217;s workflow. It&amp;#8217;s very straight&amp;nbsp;forward:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write your &lt;a class="reference external" href="https://docs.getpelican.com/en/stable/content.html"&gt;content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rebuild the site with development settings: &lt;tt class="docutils literal"&gt;invoke rebuild&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Serve website at localhost: &lt;tt class="docutils literal"&gt;invoke serve&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000&lt;/span&gt;&lt;/tt&gt; check if everything is&amp;nbsp;okay&lt;/li&gt;
&lt;li&gt;Clean output directory: &lt;tt class="docutils literal"&gt;invoke clean&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Build website with production settings and upload to the GitHub Pages: &lt;tt class="docutils literal"&gt;invoke github&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Enjoy your&amp;nbsp;blog!&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-domain"&gt;
&lt;h2&gt;Custom&amp;nbsp;Domain&lt;/h2&gt;
&lt;p&gt;By now you already have your static site live on
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;your-github-login.github.io&lt;/span&gt;&lt;/tt&gt;. In order to serve it under custom
domain you need to add a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&lt;/tt&gt; record in your &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/tt&gt; and set
custom domain in the settings of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;your-github-login.github.io&lt;/span&gt;&lt;/tt&gt;
repository on GitHub. &lt;tt class="docutils literal"&gt;Enforce &lt;span class="caps"&gt;HTTPS&lt;/span&gt;&lt;/tt&gt; is also a great option to turn&amp;nbsp;on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What&amp;#8217;s&amp;nbsp;next?&lt;/h2&gt;
&lt;p&gt;Althouh the set up and automation I described here are pretty
convenient, one thing could still be improved. We could use &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;
or &lt;a class="reference external" href="https://circleci.com/"&gt;Circle &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt; to generate static files and push to the proper
repository. &lt;span class="caps"&gt;CI&lt;/span&gt; pipeline should be triggered on each push to the remote
blog&amp;nbsp;repository.&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="blog"></category><category term="python"></category></entry><entry><title>Method vs. Class Method Quirks in PythonÂ 3</title><link href="https://blog.pilosus.org/posts/2019/04/29/bound-class-method/" rel="alternate"></link><published>2019-04-29T17:30:00+03:00</published><updated>2019-04-29T17:30:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-04-29:/posts/2019/04/29/bound-class-method/</id><summary type="html">&lt;p class="first last"&gt;A little example of how bound/unbound methods behave in Python&amp;nbsp;3&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A code snippet in Python 3 below has been discussed recently on the&amp;nbsp;internet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The question is why &lt;tt class="docutils literal"&gt;A.method&lt;/tt&gt; returns the same object on each call
while &lt;tt class="docutils literal"&gt;B.method&lt;/tt&gt; returns the new&amp;nbsp;one?&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s explore first what &lt;tt class="docutils literal"&gt;A.method&lt;/tt&gt; really&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ismethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essentially, what that means is that &lt;tt class="docutils literal"&gt;A.method&lt;/tt&gt; is a &lt;em&gt;function&lt;/em&gt;,
i.e. &lt;tt class="docutils literal"&gt;unbound method&lt;/tt&gt; of the &lt;tt class="docutils literal"&gt;class A&lt;/tt&gt;. A great way to check if a
method is indeed unbound is to check if its function object and a
class instance&amp;nbsp;exist:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__func__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__self__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See Python documentation for more details, specifically an &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html#index-32"&gt;instance
method&lt;/a&gt; subsection of the &lt;tt class="docutils literal"&gt;Data model&lt;/tt&gt; section.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;tt class="docutils literal"&gt;B.method&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;class method&lt;/tt&gt;. It returns an
&lt;em&gt;instance of the bound method object&lt;/em&gt;. Let&amp;#8217;s check&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="sa"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ismethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__func__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__self__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__self__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__func__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That means on each &lt;tt class="docutils literal"&gt;B.method&lt;/tt&gt; invocation a new object is
created. You can achieve the same behaviour with &lt;tt class="docutils literal"&gt;A.method&lt;/tt&gt; once the
method gets&amp;nbsp;bound:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;140613204502216&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;140613210350280&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;140613209057096&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, every time you call &lt;tt class="docutils literal"&gt;a.method&lt;/tt&gt; a new bound method object is&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;The example above doesn&amp;#8217;t apply to Python 2.7 though. It seems that
Python 2.7 had different implementation, so that &lt;tt class="docutils literal"&gt;A.method&lt;/tt&gt; would
return different objects every time it&amp;#8217;s&amp;nbsp;called.&lt;/p&gt;
</content><category term="python"></category><category term="cpython"></category></entry><entry><title>Letâs getÂ started!</title><link href="https://blog.pilosus.org/posts/2019/04/28/intro/" rel="alternate"></link><published>2019-04-28T16:30:00+03:00</published><updated>2019-04-28T16:45:00+03:00</updated><author><name>Vitaly Samigullin</name></author><id>tag:blog.pilosus.org,2019-04-28:/posts/2019/04/28/intro/</id><summary type="html">&lt;p&gt;My name is Vitaly R. Samigullin. I&amp;#8217;m a software developer, a team
leader, and a person who enjoys thinking about how and why things work
the way they work. Having lived in Austria and Spain, I got some
interesting immigration experience. I&amp;#8217;ve also started a small
publishing company â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;My name is Vitaly R. Samigullin. I&amp;#8217;m a software developer, a team
leader, and a person who enjoys thinking about how and why things work
the way they work. Having lived in Austria and Spain, I got some
interesting immigration experience. I&amp;#8217;ve also started a small
publishing company in 2008, which is run by my family&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Over the last few years I&amp;#8217;ve written a bunch of texts in social media
that some people confessed to find though-provoking and
interesting. As social networks tend to disurupt the openness of their
services and the internet, making user&amp;#8217;s content ephemeral and hardly
discoverable, I decided to start a personal blog. It&amp;#8217;s somewhat
2000-ish. But still a great tool to categorize and back up texts that
I consider worth&amp;nbsp;saving.&lt;/p&gt;
&lt;img alt="Vitaly" class="align-left" src="https://blog.pilosus.org/images/me.jpg" style="height: 150px;" /&gt;
&lt;p&gt;Although stand-alone blogs never get even a fraction of attention that
social networks get, a blog post is still unbeatable when it comes
&amp;#8220;slow reading&amp;#8221;. It&amp;#8217;s an essential component of learning, actually for
both readers and an author. So I except the blogging to become a tool
to learn new things through explaining them to&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t really want to limit this blog to technology and software
development. I enjoy a variety of topics ranging from arts and
architecture to literature and&amp;nbsp;philosophy.&lt;/p&gt;
&lt;p&gt;I speak a couple of natural languages. With Russian as my first
language, I&amp;#8217;m also fluent in English and have B1-level German. As
every unilingual person I would consider my mother tongue a
one-size-fits-all thing. Still there are some fields (like computer
science, kayaking or playing bass guitar) that easier to think about
in language you used to learn that field. I wouldn&amp;#8217;t even try to
translate my texts to all the languages I&amp;#8217;d mentioned. Rather I will
stick to the language that fits best to each post. So expect here a
Babylon-flavoured&amp;nbsp;mÃ©lange.&lt;/p&gt;
&lt;p&gt;How often will I post new posts? Will you find the blog completely
abandoned in a couple of years? I have no idea. But I do know that
quality is over&amp;nbsp;quantity.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s get&amp;nbsp;started!&lt;/p&gt;
</content><category term="intro"></category></entry></feed>